// Generated by CoffeeScript 1.6.1

/* ABOUT
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk

This software is released under the MIT Licence. See LICENCE.txt for details


http://www.flipcode.com/documents/matrfaq.html

  - Thanks: Tojiro - https://github.com/toji/gl-matrix
  - Thanks: Cinder for most of the math!


- TODO
  * Matrix mult function for vectors as well as scalars and matrices
  * Make functions that multiply other things destructive
  * We have set/getPos on the matrices but should we have rotation as well?
*/


(function() {
  var CoffeeGLWarning, EPSILON_VALUE, Matrix2, Matrix3, Matrix4, PI, Quaternion, Vec2, Vec3, Vec4, degToRad, glMatrixArrayType, radToDeg;

  CoffeeGLWarning = require('./error').CoffeeGLWarning;

  if (typeof (typeof Float32Array !== "undefined" && Float32Array !== null)) {
    glMatrixArrayType = Float32Array;
  } else if (typeof (typeof WebGLFloatArray !== "undefined" && WebGLFloatArray !== null)) {
    glMatrixArrayType = WebGLFloatArray;
  } else {
    glMatrixArrayType = Array;
  }

  EPSILON_VALUE = 4.37114e-05;

  PI = 3.14159;

  ({
    sinx_over_x: function(x) {
      if (x * x < 1.19209290e-07) {
        return 1;
      } else {
        return Math.sin(x) / x;
      }
    }
  });

  radToDeg = function(a) {
    return a * 57.2957795;
  };

  degToRad = function(a) {
    return a * 0.017453292523928;
  };

  /*Vec2
  */


  Vec2 = (function() {

    Vec2.prototype._DIM = 2;

    Vec2.sub = function(a, b) {
      return a.copy()["sub"](b);
    };

    Vec2.add = function(a, b) {
      return a.copy()["add"](b);
    };

    Vec2.div = function(a, b) {
      return a.copy()["div"](b);
    };

    Vec2.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Vec2.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Vec2.normalize = function(a) {
      return a.copy()["normalize"]();
    };

    Vec2.dot = function(a, b) {
      return a.dot(b);
    };

    function Vec2(x, y) {
      var _ref;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      _ref = [x, y], this.x = _ref[0], this.y = _ref[1];
    }

    Vec2.prototype.copy = function() {
      return new Vec2(this.x, this.y);
    };

    Vec2.prototype.copyFrom = function(a) {
      this.x = a.x;
      this.y = a.y;
      return this;
    };

    Vec2.prototype.length = function() {
      return Math.sqrt(this.lengthSquared());
    };

    Vec2.prototype.lengthSquared = function() {
      return this.x * this.x + this.y * this.y;
    };

    Vec2.prototype.normalize = function() {
      var m;
      m = this.length();
      if (m > 0) {
        this.multScalar(1.0 / m);
      }
      return this;
    };

    Vec2.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    };

    Vec2.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vec2.prototype.dv = function(v) {
      return new Vec2(Math.abs(this.x - v.x)(Math.abs(this.y - v.y)));
    };

    Vec2.prototype.dist = function(v) {
      return Vec2.sub(this, v).length();
    };

    Vec2.prototype.distSquared = function(v) {
      return Vec2.sub(this, v).lengthSquared();
    };

    Vec2.prototype.div = function(n) {
      var _ref;
      _ref = [this.x / n.x, this.y / n.y], this.x = _ref[0], this.y = _ref[1];
      return this;
    };

    Vec2.prototype.mult = function(v) {
      var _ref;
      _ref = [this.x * v.x, this.y * v.y], this.x = _ref[0], this.y = _ref[1];
      return this;
    };

    Vec2.prototype.multScalar = function(n) {
      var _ref;
      _ref = [this.x * n, this.y * n], this.x = _ref[0], this.y = _ref[1];
      return this;
    };

    Vec2.prototype.equals = function(v) {
      return this.x === v.x && this.y === v.y;
    };

    Vec2.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    Vec2.prototype.invalid = function() {
      return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y);
    };

    Vec2.prototype.flatten = function() {
      return [this.x, this.y];
    };

    return Vec2;

  })();

  /*Vec3
  */


  Vec3 = (function() {

    Vec3.prototype._DIM = 3;

    Vec3.sub = function(a, b) {
      return a.copy()["sub"](b);
    };

    Vec3.add = function(a, b) {
      return a.copy()["add"](b);
    };

    Vec3.cross = function(a, b) {
      return a.copy()["cross"](b);
    };

    Vec3.div = function(a, b) {
      return a.copy()["div"](b);
    };

    Vec3.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Vec3.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Vec3.normalize = function(a) {
      return a.copy()["normalize"]();
    };

    Vec3.dot = function(a, b) {
      return a.dot(b);
    };

    function Vec3(x, y, z) {
      var _ref;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      _ref = [x, y, z], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
    }

    Vec3.prototype.copy = function() {
      return new Vec3(this.x, this.y, this.z);
    };

    Vec3.prototype.copyFrom = function(a) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      return this;
    };

    Vec3.prototype.length = function() {
      return Math.sqrt(this.lengthSquared());
    };

    Vec3.prototype.lengthSquared = function() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    };

    Vec3.prototype.normalize = function() {
      var m;
      m = this.length();
      if (m > 0) {
        this.multScalar(1.0 / m);
      }
      return this;
    };

    Vec3.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    };

    Vec3.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    };

    Vec3.prototype.cross = function(v) {
      var x, y, z;
      x = this.y * v.z - this.z * v.y;
      y = this.z * v.x - this.x * v.z;
      z = this.x * v.y - this.y * v.x;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    };

    Vec3.prototype.dv = function(v) {
      return new Vec3(Math.abs(this.x - v.x)(Math.abs(this.y - v.y)(Math.abs(this.z - v.z))));
    };

    Vec3.prototype.dist = function(v) {
      return Vec3.sub(this, v).length();
    };

    Vec3.prototype.distSquared = function(v) {
      return Vec3.sub(this, v).lengthSquared();
    };

    Vec3.prototype.div = function(n) {
      var _ref;
      _ref = [this.x / n.x, this.y / n.y, this.z / n.z], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
      return this;
    };

    Vec3.prototype.mult = function(v) {
      var _ref;
      _ref = [this.x * v.x, this.y * v.y, this.z * v.z], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
      return this;
    };

    Vec3.prototype.multScalar = function(n) {
      var _ref;
      _ref = [this.x * n, this.y * n, this.z * n], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
      return this;
    };

    Vec3.prototype.equals = function(v) {
      return this.x === v.x && this.y === v.y && this.z === v.z;
    };

    Vec3.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vec3.prototype.invalid = function() {
      return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y) || this.z === Infinity || isNaN(this.z);
    };

    Vec3.prototype.flatten = function() {
      return [this.x, this.y, this.z];
    };

    return Vec3;

  })();

  /*Vec4
  */


  Vec4 = (function() {

    Vec4.prototype._DIM = 4;

    Vec4.sub = function(a, b) {
      return a.copy()["sub"](b);
    };

    Vec4.add = function(a, b) {
      return a.copy()["add"](b);
    };

    Vec4.cross = function(a, b) {
      return a.copy()["cross"](b);
    };

    Vec4.div = function(a, b) {
      return a.copy()["div"](b);
    };

    Vec4.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Vec4.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Vec4.normalize = function(a) {
      return a.copy()["normalize"]();
    };

    Vec4.dot = function(a, b) {
      return a.dot(b);
    };

    function Vec4(x, y, z, w) {
      var _ref;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      if (w == null) {
        w = 1;
      }
      _ref = [x, y, z, w], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2], this.w = _ref[3];
    }

    Vec4.prototype.copy = function() {
      return new Vec4(this.x, this.y, this.z, this.w);
    };

    Vec4.prototype.copyFrom = function(a) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      this.w = a.w;
      return this;
    };

    Vec4.prototype.length = function() {
      return Math.sqrt(this.lengthSquared());
    };

    Vec4.prototype.lengthSquared = function() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    };

    Vec4.prototype.normalize = function() {
      var m;
      m = this.length();
      if (m > 0) {
        this.multScalar(1.0 / m);
      }
      return this;
    };

    Vec4.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    };

    Vec4.prototype.equals = function(v) {
      return this.x === v.x && this.y === v.y && this.z === v.z && this.w === v.w;
    };

    Vec4.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    };

    Vec4.prototype.cross = function(v) {
      var x, y, z;
      x = this.y * v.z - this.z * v.y;
      y = this.z * v.x - this.x * v.z;
      z = this.x * v.y - this.y * v.x;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    };

    Vec4.prototype.dv = function(v) {
      return new Vec4(Math.abs(this.x - v.x)(Math.abs(this.y - v.y)(Math.abs(this.z - v.z)(Math.abs(this.w - v.w)))));
    };

    Vec4.prototype.dist = function(v) {
      return Vec4.sub(this, v).length();
    };

    Vec4.prototype.distSquared = function(v) {
      return Vec4.sub(this, v).lengthSquared();
    };

    Vec4.prototype.div = function(n) {
      var _ref;
      _ref = [this.x / n.x, this.y / n.y, this.z / n.z, this.w / n.w], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2], this.w = _ref[3];
      return this;
    };

    Vec4.prototype.mult = function(v) {
      var _ref;
      _ref = [this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2], this.w = _ref[3];
      return this;
    };

    Vec4.prototype.multScalar = function(n) {
      var _ref;
      _ref = [this.x * n, this.y * n, this.z * n, this.w * n], this.x = _ref[0], this.y = _ref[1], this.z = _ref[2], this.w = _ref[3];
      return this;
    };

    Vec4.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    };

    Vec4.prototype.invalid = function() {
      return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y) || this.z === Infinity || isNaN(this.z) || this.w === Infinity || isNaN(this.w);
    };

    Vec4.prototype.flatten = function() {
      return [this.x, this.y, this.z, this.w];
    };

    return Vec4;

  })();

  /*Matrix2
  */


  Matrix2 = (function() {

    Matrix2.prototype._DIM = 2;

    Matrix2.addScalar = function(a, b) {
      return a.copy()["addScalar"](b);
    };

    Matrix2.subScalar = function(a, b) {
      return a.copy()["subScalar"](b);
    };

    Matrix2.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Matrix2.divScalar = function(a, b) {
      return a.copy()["divScalar"](b);
    };

    Matrix2.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Matrix2.multVec = function(m, v) {
      var tv;
      tv = v.copy();
      m.multVec(tv);
      return tv;
    };

    Matrix2.transpose = function(a) {
      return a["_transpose"]();
    };

    function Matrix2(a) {
      if (a == null) {
        a = [1, 0, 0, 1];
      }
      if (a instanceof Matrix2) {
        this.a = a.a;
      } else {
        this.a = new glMatrixArrayType(a);
      }
    }

    Matrix2.prototype.copy = function() {
      return new Matrix2(this.a);
    };

    Matrix2.prototype.copyFrom = function(a) {
      var i, _i;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        this.a[i] = a.a[i];
      }
      return this;
    };

    Matrix2.prototype.multScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num * n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix2.prototype.addScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num + n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix2.prototype.subScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num - n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix2.prototype.divScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num / n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix2.prototype.identity = function() {
      this.a.set([1, 0, 0, 1]);
      return this;
    };

    Matrix2.prototype.at = function(r, c) {
      return this.a[r * 2 + c];
    };

    Matrix2.prototype.mult = function(m) {
      var a;
      a = new Matrix2();
      a.a[0] = this.a[0] * m.a[0] + this.a[2] * m.a[1];
      a.a[1] = this.a[1] * m.a[0] + this.a[3] * m.a[1];
      a.a[2] = this.a[0] * m.a[2] + this.a[2] * m.a[3];
      a.a[3] = this.a[1] * m.a[2] + this.a[3] * m.a[3];
      this.copyFrom(a);
      return this;
    };

    Matrix2.prototype.multVec = function(v) {
      var x, y;
      if (v._DIM !== 2) {
        CoffeeGLWarning("Mismatched vector and matrix dimensions");
        return;
      }
      x = this.a[0] * v.x + this.a[2] * v.y;
      y = this.a[1] * v.x + this.a[3] * v.y;
      v.x = x;
      v.y = y;
      return this;
    };

    Matrix2.prototype.getCol = function(c) {
      c = c * Matrix2.DIM;
      return Vec2(this.a[c + 0](this.a[c + 1]));
    };

    Matrix2.prototype.getRow = function(r) {
      return Vec2(this.a[r + 0](this.a[r + 2]));
    };

    Matrix2.prototype._transpose = function() {
      return new Matrix2([this.a[0], a[2], this.a[1], this.a[3]]);
    };

    Matrix2.prototype.transpose = function() {
      this.copyFrom(this._transpose());
      return this;
    };

    Matrix2.prototype.print = function() {
      console.log(this.a[0] + "," + this.a[2]);
      return console.log(this.a[1] + "," + this.a[3]);
    };

    Matrix2.prototype.rotate = function(a) {
      var c, r, s;
      r = new Matrix2();
      s = Math.sin(a);
      c = Math.cos(a);
      r.a[0] = c;
      r.a[1] = s;
      r.a[2] = -s;
      r.a[3] = c;
      this.mult(r);
      return this;
    };

    Matrix2.prototype.scale = function(v) {
      var r;
      r = new Matrix3();
      r.a[0] = v.x;
      r.a[4] = v.y;
      r.a[8] = v.z;
      this.mult(r);
      return this;
    };

    return Matrix2;

  })();

  /*Matrix3
  */


  Matrix3 = (function() {

    Matrix3.prototype._DIM = 3;

    Matrix3.addScalar = function(a, b) {
      return a.copy()["addScalar"](b);
    };

    Matrix3.subScalar = function(a, b) {
      return a.copy()["subScalar"](b);
    };

    Matrix3.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Matrix3.divScalar = function(a, b) {
      return a.copy()["divScalar"](b);
    };

    Matrix3.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Matrix3.invert = function(a) {
      return a["_invert"]();
    };

    Matrix3.multVec = function(m, v) {
      var tv;
      tv = v.copy();
      m.multVec(tv);
      return tv;
    };

    Matrix3.transpose = function(a) {
      return a["_transpose"]();
    };

    function Matrix3(a) {
      if (a == null) {
        a = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      }
      if (a instanceof Matrix3) {
        this.a = a.a;
      } else {
        this.a = new glMatrixArrayType(a);
      }
    }

    Matrix3.prototype.copy = function() {
      return new Matrix3(this.a);
    };

    Matrix3.prototype.copyFrom = function(a) {
      var i, _i;
      for (i = _i = 0; _i <= 8; i = ++_i) {
        this.a[i] = a.a[i];
      }
      return this;
    };

    Matrix3.prototype.multScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num * n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix3.prototype.addScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num + n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix3.prototype.subScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num - n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix3.prototype.divScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num / n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix3.prototype.identity = function() {
      this.a.set([1, 0, 0, 0, 1, 0, 0, 0, 1]);
      return this;
    };

    Matrix3.prototype.at = function(r, c) {
      return this.a[r * 3 + c];
    };

    Matrix3.prototype.mult = function(m) {
      var a;
      a = new Matrix3();
      a.a[0] = this.a[0] * m.a[0] + this.a[3] * m.a[1] + this.a[6] * m.a[2];
      a.a[1] = this.a[1] * m.a[0] + this.a[4] * m.a[1] + this.a[7] * m.a[2];
      a.a[2] = this.a[2] * m.a[0] + this.a[5] * m.a[1] + this.a[8] * m.a[2];
      a.a[3] = this.a[0] * m.a[3] + this.a[3] * m.a[4] + this.a[6] * m.a[5];
      a.a[4] = this.a[1] * m.a[3] + this.a[4] * m.a[4] + this.a[7] * m.a[5];
      a.a[5] = this.a[2] * m.a[3] + this.a[5] * m.a[4] + this.a[8] * m.a[5];
      a.a[6] = this.a[0] * m.a[6] + this.a[3] * m.a[7] + this.a[6] * m.a[8];
      a.a[7] = this.a[1] * m.a[6] + this.a[4] * m.a[7] + this.a[7] * m.a[8];
      a.a[8] = this.a[2] * m.a[6] + this.a[5] * m.a[7] + this.a[8] * m.a[8];
      this.copyFrom(a);
      return this;
    };

    Matrix3.prototype.multVec = function(v) {
      var x, y, z;
      if (v._DIM !== 3) {
        CoffeeGLWarning("Mismatched vector and matrix dimensions");
        return;
      }
      x = this.a[0] * v.x + this.a[3] * v.y + this.a[6] * v.z;
      y = this.a[1] * v.x + this.a[4] * v.y + this.a[7] * v.z;
      z = this.a[2] * v.x + this.a[5] * v.y + this.a[8] * v.z;
      v.x = x;
      v.y = y;
      v.z = z;
      return this;
    };

    Matrix3.prototype.getCol = function(c) {
      c = c * Matrix3.DIM;
      return Vec3(this.a[c + 0](this.a[c + 1](this.a[c + 2])));
    };

    Matrix3.prototype.getRow = function(r) {
      return Vec3(this.a[r + 0](this.a[r + 3](this.a[r + 6])));
    };

    Matrix3.prototype._invert = function() {
      var det, epsilon, inv, invDet;
      inv = new Matrix3();
      epsilon = 4.37114e-05;
      inv.a[0] = this.a[4] * this.a[8] - this.a[5] * this.a[7];
      inv.a[1] = this.a[2] * this.a[7] - this.a[1] * this.a[8];
      inv.a[2] = this.a[1] * this.a[5] - this.a[2] * this.a[4];
      inv.a[3] = this.a[5] * this.a[6] - this.a[3] * this.a[8];
      inv.a[4] = this.a[0] * this.a[8] - this.a[2] * this.a[6];
      inv.a[5] = this.a[2] * this.a[3] - this.a[0] * this.a[5];
      inv.a[6] = this.a[3] * this.a[7] - this.a[4] * this.a[6];
      inv.a[7] = this.a[1] * this.a[6] - this.a[0] * this.a[7];
      inv.a[8] = this.a[0] * this.a[4] - this.a[1] * this.a[3];
      det = this.a[0] * inv.a[0] + this.a[1] * inv.a[3] + this.a[2] * inv.a[6];
      if (Math.abs(det) > epsilon) {
        invDet = 1.0 / det;
        inv.multScalar(invDet);
      }
      return inv;
    };

    Matrix3.prototype.invert = function() {
      this.copyFrom(this._invert());
      return this;
    };

    Matrix3.prototype._transpose = function() {
      return new Matrix3([this.a[0], this.a[3], this.a[6], this.a[1], this.a[4], this.a[7], this.a[2], this.a[5], this.a[8]]);
    };

    Matrix3.prototype.transpose = function() {
      this.copyFrom(this._transpose());
      return this;
    };

    Matrix3.prototype.print = function() {
      console.log(this.a[0] + "," + this.a[3] + "," + this.a[6]);
      console.log(this.a[1] + "," + this.a[4] + "," + this.a[7]);
      return console.log(this.a[2] + "," + this.a[5] + "," + this.a[8]);
    };

    Matrix3.prototype.rotate = function(v, a) {
      var c, r, s;
      r = new Matrix3();
      s = Math.sin(a);
      c = Math.cos(a);
      v.normalize();
      r.a[0] = v.x * v.x * (1 - c) + c;
      r.a[1] = v.x * v.y * (1 - c) + v.z * s;
      r.a[2] = v.x * v.z * (1 - c) - v.y * s;
      r.a[3] = v.x * v.y * (1 - c) - v.z * s;
      r.a[4] = v.y * v.y * (1 - c) + c;
      r.a[5] = v.y * v.z * (1 - c) + v.x * s;
      r.a[6] = v.x * v.z * (1 - c) + v.y * s;
      r.a[7] = v.y * v.z * (1 - c) - v.x * s;
      r.a[8] = v.z * v.z * (1 - c) + c;
      this.mult(r);
      return this;
    };

    Matrix3.prototype.scale = function(v) {
      var r;
      r = new Matrix3();
      r.a[0] = v.x;
      r.a[4] = v.y;
      r.a[8] = v.z;
      this.mult(r);
      return this;
    };

    return Matrix3;

  })();

  /*Matrix4
  */


  Matrix4 = (function() {

    Matrix4.prototype._DIM = 4;

    Matrix4.addScalar = function(a, b) {
      return a.copy()["addScalar"](b);
    };

    Matrix4.subScalar = function(a, b) {
      return a.copy()["subScalar"](b);
    };

    Matrix4.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Matrix4.divScalar = function(a, b) {
      return a.copy()["divScalar"](b);
    };

    Matrix4.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Matrix4.invert = function(a) {
      return a["_invert"]();
    };

    Matrix4.transpose = function(a) {
      return a["_transpose"]();
    };

    Matrix4.multVec = function(m, v) {
      var tv;
      tv = v.copy();
      m.multVec(tv);
      return tv;
    };

    function Matrix4(a) {
      if (a == null) {
        a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      }
      if (a instanceof Matrix4) {
        this.a = a.a;
      } else {
        this.a = new glMatrixArrayType(a);
      }
    }

    Matrix4.prototype.copy = function() {
      return new Matrix4(this.a);
    };

    Matrix4.prototype.copyFrom = function(a) {
      var i, _i;
      for (i = _i = 0; _i <= 15; i = ++_i) {
        this.a[i] = a.a[i];
      }
      return this;
    };

    Matrix4.prototype.multScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num * n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix4.prototype.addScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num + n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix4.prototype.subScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num - n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix4.prototype.divScalar = function(n) {
      var num;
      this.a = (function() {
        var _i, _len, _ref, _results;
        _ref = this.a;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num / n);
        }
        return _results;
      }).call(this);
      return this;
    };

    Matrix4.prototype.identity = function() {
      this.a.set([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
      return this;
    };

    Matrix4.prototype.at = function(r, c) {
      return this.a[r * 4 + c];
    };

    Matrix4.prototype.getMatrix3 = function() {
      return new Matrix3([this.a[0], this.a[1], this.a[2], this.a[4], this.a[5], this.a[6], this.a[8], this.a[9], this.a[10]]);
    };

    Matrix4.prototype.mult = function(m) {
      var a;
      a = new Matrix4();
      a.a[0] = this.a[0] * m.a[0] + this.a[4] * m.a[1] + this.a[8] * m.a[2] + this.a[12] * m.a[3];
      a.a[1] = this.a[1] * m.a[0] + this.a[5] * m.a[1] + this.a[9] * m.a[2] + this.a[13] * m.a[3];
      a.a[2] = this.a[2] * m.a[0] + this.a[6] * m.a[1] + this.a[10] * m.a[2] + this.a[14] * m.a[3];
      a.a[3] = this.a[3] * m.a[0] + this.a[7] * m.a[1] + this.a[11] * m.a[2] + this.a[15] * m.a[3];
      a.a[4] = this.a[0] * m.a[4] + this.a[4] * m.a[5] + this.a[8] * m.a[6] + this.a[12] * m.a[7];
      a.a[5] = this.a[1] * m.a[4] + this.a[5] * m.a[5] + this.a[9] * m.a[6] + this.a[13] * m.a[7];
      a.a[6] = this.a[2] * m.a[4] + this.a[6] * m.a[5] + this.a[10] * m.a[6] + this.a[14] * m.a[7];
      a.a[7] = this.a[3] * m.a[4] + this.a[7] * m.a[5] + this.a[11] * m.a[6] + this.a[15] * m.a[7];
      a.a[8] = this.a[0] * m.a[8] + this.a[4] * m.a[9] + this.a[8] * m.a[10] + this.a[12] * m.a[11];
      a.a[9] = this.a[1] * m.a[8] + this.a[5] * m.a[9] + this.a[9] * m.a[10] + this.a[13] * m.a[11];
      a.a[10] = this.a[2] * m.a[8] + this.a[6] * m.a[9] + this.a[10] * m.a[10] + this.a[14] * m.a[11];
      a.a[11] = this.a[3] * m.a[8] + this.a[7] * m.a[9] + this.a[11] * m.a[10] + this.a[15] * m.a[11];
      a.a[12] = this.a[0] * m.a[12] + this.a[4] * m.a[13] + this.a[8] * m.a[14] + this.a[12] * m.a[15];
      a.a[13] = this.a[1] * m.a[12] + this.a[5] * m.a[13] + this.a[9] * m.a[14] + this.a[13] * m.a[15];
      a.a[14] = this.a[2] * m.a[12] + this.a[6] * m.a[13] + this.a[10] * m.a[14] + this.a[14] * m.a[15];
      a.a[15] = this.a[3] * m.a[12] + this.a[7] * m.a[13] + this.a[11] * m.a[14] + this.a[15] * m.a[15];
      this.copyFrom(a);
      return this;
    };

    Matrix4.prototype.multVec = function(v) {
      var w, x, y, z;
      if (v._DIM !== 3 && v._DIM !== 4) {
        CoffeeGLWarning("Mismatched vector and matrix dimensions");
        return;
      }
      if (v._DIM === 3) {
        x = this.a[0] * v.x + this.a[4] * v.y + this.a[8] * v.z + this.a[12];
        y = this.a[1] * v.x + this.a[5] * v.y + this.a[9] * v.z + this.a[13];
        z = this.a[2] * v.x + this.a[6] * v.y + this.a[10] * v.z + this.a[14];
        w = this.a[3] * v.x + this.a[7] * v.y + this.a[11] * v.z + this.a[15];
        v.x = x / w;
        v.y = y / w;
        v.z = z / w;
      } else {
        x = this.a[0] * v.x + this.a[4] * v.y + this.a[8] * v.z + this.a[12] * v.w;
        y = this.a[1] * v.x + this.a[5] * v.y + this.a[9] * v.z + this.a[13] * v.w;
        z = this.a[2] * v.x + this.a[6] * v.y + this.a[10] * v.z + this.a[14] * v.w;
        w = this.a[3] * v.x + this.a[7] * v.y + this.a[11] * v.z + this.a[15] * v.w;
        v.x = x;
        v.y = y;
        v.z = z;
        v.w = w;
      }
      return this;
    };

    Matrix4.prototype.at = function(r, c) {
      return this.a[c * Matrix4.DIM + r];
    };

    Matrix4.prototype.getCol = function(c) {
      c = c * Matrix4.DIM;
      return Vec4(this.a[c + 0](this.a[c + 1](this.a[c + 2](this.a[c + 3]))));
    };

    Matrix4.prototype.getRow = function(r) {
      return Vec4(this.a[r + 0](this.a[r + 4](this.a[r + 8](this.a[r + 12]))));
    };

    Matrix4.prototype._invert = function() {
      var a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5, det, epsilon, inv, invDet;
      inv = new Matrix4();
      epsilon = 4.37114e-05;
      a0 = this.a[0] * this.a[5] - this.a[1] * this.a[4];
      a1 = this.a[0] * this.a[6] - this.a[2] * this.a[4];
      a2 = this.a[0] * this.a[7] - this.a[3] * this.a[4];
      a3 = this.a[1] * this.a[6] - this.a[2] * this.a[5];
      a4 = this.a[1] * this.a[7] - this.a[3] * this.a[5];
      a5 = this.a[2] * this.a[7] - this.a[3] * this.a[6];
      b0 = this.a[8] * this.a[13] - this.a[9] * this.a[12];
      b1 = this.a[8] * this.a[14] - this.a[10] * this.a[12];
      b2 = this.a[8] * this.a[15] - this.a[11] * this.a[12];
      b3 = this.a[9] * this.a[14] - this.a[10] * this.a[13];
      b4 = this.a[9] * this.a[15] - this.a[11] * this.a[13];
      b5 = this.a[10] * this.a[15] - this.a[11] * this.a[14];
      det = a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;
      if (Math.abs(det) > epsilon) {
        inv.a[0] = +this.a[5] * b5 - this.a[6] * b4 + this.a[7] * b3;
        inv.a[4] = -this.a[4] * b5 + this.a[6] * b2 - this.a[7] * b1;
        inv.a[8] = +this.a[4] * b4 - this.a[5] * b2 + this.a[7] * b0;
        inv.a[12] = -this.a[4] * b3 + this.a[5] * b1 - this.a[6] * b0;
        inv.a[1] = -this.a[1] * b5 + this.a[2] * b4 - this.a[3] * b3;
        inv.a[5] = +this.a[0] * b5 - this.a[2] * b2 + this.a[3] * b1;
        inv.a[9] = -this.a[0] * b4 + this.a[1] * b2 - this.a[3] * b0;
        inv.a[13] = +this.a[0] * b3 - this.a[1] * b1 + this.a[2] * b0;
        inv.a[2] = +this.a[13] * a5 - this.a[14] * a4 + this.a[15] * a3;
        inv.a[6] = -this.a[12] * a5 + this.a[14] * a2 - this.a[15] * a1;
        inv.a[10] = +this.a[12] * a4 - this.a[13] * a2 + this.a[15] * a0;
        inv.a[14] = -this.a[12] * a3 + this.a[13] * a1 - this.a[14] * a0;
        inv.a[3] = -this.a[9] * a5 + this.a[10] * a4 - this.a[11] * a3;
        inv.a[7] = +this.a[8] * a5 - this.a[10] * a2 + this.a[11] * a1;
        inv.a[11] = -this.a[8] * a4 + this.a[9] * a2 - this.a[11] * a0;
        inv.a[15] = +this.a[8] * a3 - this.a[9] * a1 + this.a[10] * a0;
      }
      invDet = 1.0 / det;
      inv.multScalar(invDet);
      return inv;
    };

    Matrix4.prototype.invert = function() {
      this.copyFrom(this._invert());
      return this;
    };

    Matrix4.prototype.transpose = function() {
      this.copyFrom(this._transpose());
      return this;
    };

    Matrix4.prototype._transpose = function() {
      return new Matrix4([this.a[0], this.a[4], this.a[8], this.a[12], this.a[1], this.a[5], this.a[9], this.a[13], this.a[2], this.a[6], this.a[10], this.a[14], this.a[3], this.a[7], this.a[11], this.a[15]]);
    };

    Matrix4.prototype.translate = function(v) {
      var r;
      if (v._DIM === 3 || v._DIM === _DIM) {
        r = new Matrix4();
        r.a[12] = v.x;
        r.a[13] = v.y;
        r.a[14] = v.z;
        this.mult(r);
      } else {
        CoffeeGLWarning("Mismatched vector and matrix dimensions");
      }
      return this;
    };

    Matrix4.prototype.setPos = function(v) {
      if (v.x != null) {
        this.a[12] = v.x;
      }
      if (v.y != null) {
        this.a[13] = v.y;
      }
      if (v.z != null) {
        this.a[14] = v.z;
      }
      return this;
    };

    Matrix4.prototype.getPos = function() {
      return new Vec3(this.a[12], this.a[13], this.a[14]);
    };

    Matrix4.prototype.print = function() {
      console.log(this.a[0] + "," + this.a[4] + "," + this.a[8] + "," + this.a[12]);
      console.log(this.a[1] + "," + this.a[5] + "," + this.a[9] + "," + this.a[13]);
      console.log(this.a[2] + "," + this.a[6] + "," + this.a[10] + "," + this.a[14]);
      return console.log(this.a[3] + "," + this.a[7] + "," + this.a[11] + "," + this.a[15]);
    };

    Matrix4.prototype.lookAt = function(eye, look, up) {
      var f, m, s, t, u, w;
      f = Vec3.sub(look, eye);
      f.normalize();
      u = up.copy();
      u.normalize();
      s = Vec3.cross(f, u);
      w = Vec3.cross(s, f);
      m = new Matrix4([s.x, u.x, -f.x, 0, s.y, u.y, -f.y, 0, s.z, u.z, -f.z, 0, 0, 0, 0, 1]);
      t = new Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -eye.x, -eye.y, -eye.z, 1]);
      m.mult(t);
      this.copyFrom(m);
      return this;
    };

    Matrix4.prototype.makePerspective = function(fovy, aspect, znear, zfar) {
      var xmax, xmin, ymax, ymin;
      ymax = znear * Math.tan(fovy * Math.PI / 360.0);
      ymin = -ymax;
      xmin = ymin * aspect;
      xmax = ymax * aspect;
      this.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
      return this;
    };

    Matrix4.prototype.makeFrustum = function(left, right, bottom, top, znear, zfar) {
      var a, b, c, d, x, y;
      x = 2 * znear / (right - left);
      y = 2 * znear / (top - bottom);
      a = (right + left) / (right - left);
      b = (top + bottom) / (top - bottom);
      c = -(zfar + znear) / (zfar - znear);
      d = -2 * zfar * znear / (zfar - znear);
      this.a = new glMatrixArrayType([x, 0, 0, 0, 0, y, 0, 0, a, b, c, -1, 0, 0, d, 0]);
      return this;
    };

    Matrix4.prototype.makeOrtho = function(left, right, bottom, top, znear, zfar) {
      var tx, ty, tz;
      tx = -(right + left) / (right - left);
      ty = -(top + bottom) / (top - bottom);
      tz = -(zfar + znear) / (zfar - znear);
      this.a = new glMatrixArrayType([2 / (right - left), 0, 0, 0, 0, 2 / (top - bottom), 0, 0, 0, 0, -2 / (zfar - znear), 0, tx, ty, tz, 1]);
      return this;
    };

    Matrix4.prototype.rotate = function(v, a) {
      var c, r, s;
      r = new Matrix4();
      s = Math.sin(a);
      c = Math.cos(a);
      v.normalize();
      r.a[0] = v.x * v.x * (1 - c) + c;
      r.a[1] = v.x * v.y * (1 - c) + v.z * s;
      r.a[2] = v.x * v.z * (1 - c) - v.y * s;
      r.a[4] = v.x * v.y * (1 - c) - v.z * s;
      r.a[5] = v.y * v.y * (1 - c) + c;
      r.a[6] = v.y * v.z * (1 - c) + v.x * s;
      r.a[8] = v.x * v.z * (1 - c) + v.y * s;
      r.a[9] = v.y * v.z * (1 - c) - v.x * s;
      r.a[10] = v.z * v.z * (1 - c) + c;
      this.mult(r);
      return this;
    };

    Matrix4.prototype.scale = function(v) {
      var r;
      r = new Matrix4();
      r.a[0] = v.x;
      r.a[5] = v.y;
      r.a[10] = v.z;
      this.mult(r);
      return this;
    };

    return Matrix4;

  })();

  /*Quaternion
  */


  Quaternion = (function() {

    Quaternion.addScalar = function(a, b) {
      return a.copy()["addScalar"](b);
    };

    Quaternion.subScalar = function(a, b) {
      return a.copy()["subScalar"](b);
    };

    Quaternion.multScalar = function(a, b) {
      return a.copy()["multScalar"](b);
    };

    Quaternion.divScalar = function(a, b) {
      return a.copy()["divScalar"](b);
    };

    Quaternion.mult = function(a, b) {
      return a.copy()["mult"](b);
    };

    Quaternion.transVec3 = function(q, v) {
      var tv;
      tv = v.copy();
      q.transVec3(tv);
      return tv;
    };

    Quaternion.fromTo = function(f, t) {
      var tv;
      tv = new Quaternion();
      tv.fromTo(f, t);
      return tv;
    };

    function Quaternion(v, w) {
      if ((v == null) || (w == null)) {
        this.v = new Vec3(0, 0, 0);
        this.w = 1;
      } else {
        this.v = v.copy();
        this.w = w;
      }
    }

    Quaternion.prototype.copy = function() {
      return new Quaternion(this.v, this.w);
    };

    Quaternion.prototype.axis = function() {
      var ca, invlen;
      ca = w;
      invlen = 1.0 / Math.sqrt(1.0 - ca * ca);
      return Vec3.multScalar(v, invlen);
    };

    Quaternion.prototype.angle = function() {
      var ca;
      ca = w;
      return Math.acos(ca) * 2;
    };

    Quaternion.prototype.pitch = function() {
      return Math.atan2(2 * (this.v.y * this.v.z + this.w * this.v.x), this.w * this.w - this.v.x * this.v.x - this.v.y * this.v.y + this.v.z * this.v.z);
    };

    Quaternion.prototype.yaw = function() {
      return Math.sin(-2 * (this.v.x * this.v.z - this.w * this.v.y));
    };

    Quaternion.prototype.roll = function() {
      return Math.atan2(2 * (this.v.x * this.v.y + this.w * this.v.z), this.w * this.w + this.v.x * this.v.x - this.v.y * this.v.y - this.v.z * this.v.z);
    };

    Quaternion.prototype.dot = function(a) {
      return this.w * a.w + v.dot(a.v);
    };

    Quaternion.prototype.length = function() {
      return Math.sqrt(this.w * this.w + this.v.lengthSquared());
    };

    Quaternion.prototype.lengthSquared = function() {
      return w * w + this.v.lengthSquared();
    };

    Quaternion.prototype.invert = function() {
      var norm, normRecip;
      norm = this.w * this.w + this.v.x * this.v.x + this.v.y * this.v.y + this.v.z * this.v.z;
      if (Math.abs(norm) < EPSILON_VALUE) {
        return this.identity();
      }
      normRecip = 1.0 / norm;
      this.w = normRecip * w;
      this.v.multScalar(-normRecip);
      return this;
    };

    Quaternion.prototype.add = function(q) {
      this.w += q.w;
      this.v.x += q.v.x;
      this.v.y += q.v.y;
      this.v.z += q.v.z;
      return this;
    };

    Quaternion.prototype.sub = function(q) {
      this.w -= q.w;
      this.v.x -= q.v.x;
      this.v.y -= q.v.y;
      this.v.z -= q.v.z;
      return this;
    };

    Quaternion.prototype.multiply = function(q) {
      return this.mult(q);
    };

    Quaternion.prototype.mult = function(q) {
      this.w = this.w * q.w - this.v.x * q.v.x - this.v.y * q.v.y - this.v.z * q.v.z;
      this.v.x = q.w * this.v.x + q.v.x * this.w + q.v.y * this.v.z - q.v.z * this.v.y;
      this.v.y = q.w * this.v.y + q.v.y * this.w + q.v.z * this.v.x - q.v.x * this.v.z;
      this.v.z = q.w * this.v.z + q.v.z * this.w + q.v.x * this.v.y - q.v.y * this.v.x;
      return this;
    };

    Quaternion.prototype.multScalar = function(s) {
      this.w = this.w * s;
      this.v.multScalar(s);
      return this;
    };

    Quaternion.prototype.transVec3 = function(v) {
      var cm, pm, vm, x, y, z;
      vm = 2 * (this.v.x * v.x + this.v.y * v.y + this.v.z * v.z);
      cm = 2 * this.w;
      pm = cm * this.w - 1.0;
      x = pm * v.x + vm * this.v.x + cm * (this.v.y * v.z - this.v.z * v.y);
      y = pm * v.y + vm * this.v.y + cm * (this.v.z * v.x - this.v.x * v.z);
      z = pm * v.z + vm * this.v.z + cm * (this.v.x * v.y - this.v.y * v.x);
      v.x = x;
      v.y = y;
      v.z = z;
      return this;
    };

    Quaternion.prototype.normalize = function() {
      var len;
      len = this.length();
      if (len > 0) {
        this.w /= len;
        this.v.multScalar(1.0 / len);
      } else {
        this.w = 1.0;
        this.v.x = v.y = v.z = 0.0;
      }
      return this;
    };

    Quaternion.prototype.log = function() {
      var k, sintheta, t, theta;
      t = 1.0;
      if (this.w < t) {
        t = this.w;
      }
      theta = Math.acos(t);
      if (theta === 0) {
        return new Quaternion(this.v, 0);
      }
      sintheta = Math.sin(theta);
      k = theta / sintheta;
      if (Math.abs(sintheta) < 1 && Math.abs(theta) >= 3.402823466e+38 * Math.abs(sintheta)) {
        k = 1;
      }
      return new Quaternion(new Vec3(this.v.x * k, this.v.y * k, v.z * k), 0);
    };

    Quaternion.prototype.exp = function() {
      var costheta, k, sintheta, theta;
      theta = this.v.length();
      sintheta = sin(theta);
      k = sintheta / theta;
      if (Math.abs(theta) < 1 && Math.abs(sintheta) >= 3.402823466e+38 * Math.abs(theta)) {
        k = 1;
      }
      costheta = Math.cos(theta);
      return new Quaternion(new Vec3(this.v.x * k, this.v.y * k, v.z * k), costheta);
    };

    Quaternion.prototype.invert2 = function() {
      var qdot;
      qdot = this.dot();
      this.v = new Vec3(-this.v.x / qdot, -this.v.y / qdot, -this.v.z / qdot);
      this.w = this.w / qdot;
      return this;
    };

    Quaternion.prototype.fromTo = function(f, t) {
      var axis;
      axis = Vec3.cross(f, t);
      this.w = f.dot(t);
      this.v.x = axis.x;
      this.v.y = axis.y;
      this.v.z = axis.z;
      this.normalize();
      this.w += 1.0;
      if (this.w <= EPSILON_VALUE) {
        if (f.z * f.z > f.x * f.x) {
          this.w = 0.0;
          this.v.x = 0;
          this.v.y = f.z;
          this.v.z = -f.y;
        } else {
          this.w = 0.0;
          this.v.x = f.y;
          this.v.y = -f.x;
          this.v.z = 0.0;
        }
        this.normalize();
      }
      return this;
    };

    Quaternion.prototype.fromAxisAngle = function(a, r) {
      this.w = Math.cos(r / 2);
      this.v = Vec3.normalize(a).multScalar(Math.sin(r / 2));
      return this;
    };

    Quaternion.prototype.fromRotations = function(x, y, z) {
      var cx, cy, cz, sx, sy, sz;
      x *= 0.5;
      y *= 0.5;
      z *= 0.5;
      cx = Math.cos(x);
      sx = Math.sin(x);
      cy = Math.cos(y);
      sy = Math.sin(y);
      cz = Math.cos(z);
      sz = Math.sin(z);
      this.w = cx * cy * cz - sx * sy * sz;
      this.v.x = sx * cy * cx + cx * sy * sz;
      this.v.y = cx * sy * cz - sx * cy * sz;
      this.v.z = cx * cy * sz + sx * sy * cx;
      return this;
    };

    Quaternion.prototype.getAxisAngle = function() {
      var ca, invlen, r;
      ca = this.w;
      r = Math.acos(ca) * 2;
      invlen = 1.0 / Math.sqrt(1.0 - ca * ca);
      return [new Vec3(this.v.x * invlen, this.v.y * invlen, this.v.z * invlen), r];
    };

    Quaternion.prototype.getMatrix4 = function() {
      var wx, wy, wz, xs, xx, xy, xz, ys, yy, yz, zs, zz;
      xs = this.v.x + this.v.x;
      ys = this.v.y + this.v.y;
      zs = this.v.z + this.v.z;
      wx = this.w * xs;
      wy = this.w * ys;
      wz = this.w * zs;
      xx = this.v.x * xs;
      xy = this.v.x * ys;
      xz = this.v.x * zs;
      yy = this.v.y * ys;
      yz = this.v.y * zs;
      zz = this.v.z * zs;
      return new Matrix4([1.0 - (yy + zz), xy + wz, xz - wy, 0, xy - wz, 1.0 - (xx + zz), yz + wx, 0, xz + wy, yz - wx, 1.0 - (xx + yy), 0, 0, 0, 0, 1.0]);
    };

    Quaternion.prototype.lerp = function(t, end) {
      var costheta, result;
      costheta = end.dot();
      result = Quaternion.multScalar(end, t);
      if (costheta >= EPSILON_VALUE) {
        result.add(result.multScalar(1.0 - t));
      } else {
        result.add(result.multScalar(t - 1.0));
      }
      return result;
    };

    Quaternion.prototype.slerpShortestUnenforced = function(t, end) {
      var a, d, e, lengthD, lengthS, q, s, st;
      d = this.copy();
      d.sub(end);
      lengthD = Math.sqrt(this.dot(end));
      st = this.copy();
      st.add(end);
      lengthS = Math.sqrt(st.dot(st));
      a = 2 * Math.atan2(lengthD, lengthS);
      s = 1 - t;
      q = this.copy();
      q.multScalar(sinx_over_x(s * a) / sinx_over_x(a) * s);
      e = end.copy();
      e.multScalar(sinx_over_x(t * a) / sinx_over_x(a) * t);
      q.add(e);
      q.normalize();
      return q;
    };

    Quaternion.prototype.slerp = function(t, end) {
      var cosTheta, e, endInterp, q, recipSinTheta, startInterp, theta;
      cosTheta = this.dot(end);
      if (cosTheta >= EPSILON) {
        if (1.0 - cosTheta > EPSILON) {
          theta = Math.acos(cosTheta);
          recipSinTheta = 1.0 / Math.sin(theta);
          startInterp = Math.sin((1.0 - t) * theta) * recipSinTheta;
          endInterp = Math.sin(t * theta) * recipSinTheta;
        } else {
          startInterp = 1.0 - t;
          endInterp = t;
        }
      } else {
        if (1.0 + cosTheta > EPSILON) {
          theta = Math.acos(-cosTheta);
          recipSinTheta = 1.0 / Math.sin(theta);
          startInterp = Math.sin((t - 1.0) * theta) * recipSinTheta;
          endInterp = Math.sin(t * theta) * recipSinTheta;
        } else {
          startInterp = t(-1.0);
          endInterp = t;
        }
      }
      q = this.copy();
      q.mult(startInterp);
      e = end.copy();
      e.mult(endInterp);
      q.add(e);
      return q;
    };

    Quaternion.prototype.fromMatrix4 = function(m) {
      var a, b, i, j, k, recip, s, trace;
      trace = m.a[0] + m.a[5] + m.a[10];
      if (trace > 0.0) {
        s = Math.sqrt(trace + 1.0);
        this.w = s * 0.5;
        recip = 0.5 / s;
        this.v.x = (m.at(2, 1) - m.at(1, 2)) * recip;
        this.v.y = (m.at(0, 2) - m.at(2, 0)) * recip;
        this.v.z = (m.at(1, 0) - m.at(0, 1)) * recip;
      } else {
        i = 0;
        if (m.at(1, 1) > m.at(0, 0)) {
          i = 1;
        }
        if (m.at(2, 2) > m.at(i, i)) {
          i = 2;
        }
        j = (i + 1) % 3;
        k = (j + 1) % 3;
        s = Math.sqrt(m.at(i, i) - m.at(j, j) - m.at(k, k) + 1.0);
        if (i === 0) {
          this.v.x = 0.5 * s;
        } else if (i === 1) {
          this.v.y = 0.5 * s;
        } else {
          this.v.z = 0.5 * s;
        }
        recip = 0.5 / s;
        this.w = (m.at(k, j) - m.at(j, k)) * recip;
        a = (m.at(j, i) + m.at(i, j)) * recip;
        b = (m.at(k, i) + m.at(i, k)) * recip;
        if (j === 0) {
          this.v.x = a;
        } else if (j === 1) {
          this.v.y = a;
        } else {
          this.v.z = a;
        }
        if (k === 0) {
          this.v.x = b;
        } else if (k === 1) {
          this.v.y = b;
        } else {
          this.v.z = b;
        }
      }
      return this;
    };

    return Quaternion;

  })();

  module.exports = {
    Vec2: Vec2,
    Vec3: Vec3,
    Vec4: Vec4,
    Matrix2: Matrix2,
    Matrix3: Matrix3,
    Matrix4: Matrix4,
    radToDeg: radToDeg,
    degToRad: degToRad,
    Quaternion: Quaternion,
    PI: PI
  };

}).call(this);
