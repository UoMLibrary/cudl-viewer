// Generated by CoffeeScript 1.6.1

/* ABOUT
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk

This software is released under the MIT Licence. See LICENCE.txt for details

- Resources

* http://www.yuiblog.com/blog/2007/06/12/module-pattern/
* http://www.plexical.com/blog/2012/01/25/writing-coffeescript-for-browser-and-nod/
* https://github.com/field/FieldKit.js
*/


(function() {
  var App, CoffeeGLError, CoffeeGLLog, CoffeeGLWarning, Colour, Matrix4, OrthoCamera, PerspCamera, Shader, Vec2, Vec3, Vec4, makeDebugContext, makeMouseEmitter, makeTouchEmitter, _ref, _ref1, _ref2, _ref3,
    _this = this;

  _ref = require("./math"), Vec2 = _ref.Vec2, Vec3 = _ref.Vec3, Vec4 = _ref.Vec4, Matrix4 = _ref.Matrix4;

  Shader = require("./shader").Shader;

  _ref1 = require("./camera"), PerspCamera = _ref1.PerspCamera, OrthoCamera = _ref1.OrthoCamera;

  _ref2 = require("./signal"), makeMouseEmitter = _ref2.makeMouseEmitter, makeTouchEmitter = _ref2.makeTouchEmitter;

  Colour = require("./colour").Colour;

  _ref3 = require("./error"), CoffeeGLError = _ref3.CoffeeGLError, CoffeeGLWarning = _ref3.CoffeeGLWarning, CoffeeGLLog = _ref3.CoffeeGLLog;

  makeDebugContext = require("./debug").makeDebugContext;

  /* App
  */


  App = (function() {

    function App(element, app_context, init, draw, update, onError, debug) {
      var cl,
        _this = this;
      this.app_context = app_context;
      this.init = init;
      this.draw = draw;
      this.update = update;
      this.onError = onError;
      this.debug = debug != null ? debug : false;
      this.getDelta = function() {
        return App.prototype.getDelta.apply(_this, arguments);
      };
      this.run = function() {
        return App.prototype.run.apply(_this, arguments);
      };
      this.canvas = document.getElementById(element);
      if (!this.canvas) {
        CoffeeGLError("Trying to create an app on canvas that does not exist");
      }
      if (!this._detectWebGL()) {
        if (this.onError != null) {
          this.onError();
        }
        CoffeeGLWarning("No WebGL Context Detected");
        return;
      }
      this.height = this.canvas.height;
      this.width = this.canvas.width;
      makeMouseEmitter(this);
      makeTouchEmitter(this);
      this._pause = false;
      cl = function(event) {
        event.preventDefault();
        return _this._initContext();
      };
      this.canvas.addEventListener("webglcontextlost", cl, false);
      this._initContext();
    }

    App.prototype._detectWebGL = function() {
      var name, names, _i, _len;
      if (!!window.WebGLRenderingContext) {
        names = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          this.gl = this.canvas.getContext(name);
          if ((this.gl != null) && typeof this.gl.getParameter === "function") {
            return true;
          }
        }
      }
      return false;
    };

    App.prototype._initContext = function() {
      this.startTime = Date.now();
      this.oldTime = this.startTime;
      this.gl = this.canvas.getContext('webgl');
      if (this.gl == null) {
        this.gl = this.canvas.getContext('experimental-webgl');
      }
      if (!this.gl) {
        if (this.onError != null) {
          this.onError();
        }
        CoffeeGLWarning("WebGL Not supported or context not found", "App");
        return;
      }
      this.profile();
      this._framescounter = 0;
      if (this.debug) {
        CoffeeGLLog("creating OpenGL debug context");
        makeDebugContext(this.gl);
      }
      this.resize(this.width, this.height);
      return this._init();
    };

    var BrowserDetect = {
      init: function () {
        this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
        this.version = this.searchVersion(navigator.userAgent)
          || this.searchVersion(navigator.appVersion)
          || "an unknown version";
        this.OS = this.searchString(this.dataOS) || "an unknown OS";
      },
      searchString: function (data) {
        for (var i=0;i<data.length;i++) {
          var dataString = data[i].string;
          var dataProp = data[i].prop;
          this.versionSearchString = data[i].versionSearch || data[i].identity;
          if (dataString) {
            if (dataString.indexOf(data[i].subString) != -1)
              return data[i].identity;
          }
          else if (dataProp)
            return data[i].identity;
        }
      },
      searchVersion: function (dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) return;
        return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
      },
      dataBrowser: [
        {
          string: navigator.userAgent,
          subString: "Chrome",
          identity: "Chrome"
        },
        {   string: navigator.userAgent,
          subString: "OmniWeb",
          versionSearch: "OmniWeb/",
          identity: "OmniWeb"
        },
        {
          string: navigator.vendor,
          subString: "Apple",
          identity: "Safari",
          versionSearch: "Version"
        },
        {
          prop: window.opera,
          identity: "Opera",
          versionSearch: "Version"
        },
        {
          string: navigator.vendor,
          subString: "iCab",
          identity: "iCab"
        },
        {
          string: navigator.vendor,
          subString: "KDE",
          identity: "Konqueror"
        },
        {
          string: navigator.userAgent,
          subString: "Firefox",
          identity: "Firefox"
        },
        {
          string: navigator.vendor,
          subString: "Camino",
          identity: "Camino"
        },
        {   // for newer Netscapes (6+)
          string: navigator.userAgent,
          subString: "Netscape",
          identity: "Netscape"
        },
        {
          string: navigator.userAgent,
          subString: "MSIE",
          identity: "Explorer",
          versionSearch: "MSIE"
        },
        {
          string: navigator.userAgent,
          subString: "Gecko",
          identity: "Mozilla",
          versionSearch: "rv"
        },
        {     // for older Netscapes (4-)
          string: navigator.userAgent,
          subString: "Mozilla",
          identity: "Netscape",
          versionSearch: "Mozilla"
        }
      ],
      dataOS : [
        {
          string: navigator.platform,
          subString: "Win",
          identity: "Windows"
        },
        {
          string: navigator.platform,
          subString: "Mac",
          identity: "Mac"
        },
        {
             string: navigator.userAgent,
             subString: "iPhone",
             identity: "iPhone/iPod"
          },
        {
          string: navigator.platform,
          subString: "Linux",
          identity: "Linux"
        }
      ]

    };;

    App.prototype.profile = function() {
      var highp;
      this.profile = {};
      this.profile.antialias = this.gl.getContextAttributes().antialias;
      this.profile.aa_size = this.gl.getParameter(this.gl.SAMPLES);
      highp = this.gl.getShaderPrecisionFormat(this.gl.FRAGMENT_SHADER, this.gl.HIGH_FLOAT);
      this.profile.highpSupported = highp.precision !== 0;
      this.profile.maxTexSize = this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE);
      this.profile.maxCubeSize = this.gl.getParameter(this.gl.MAX_CUBE_MAP_TEXTURE_SIZE);
      this.profile.maxRenderbufferSize = this.gl.getParameter(this.gl.MAX_RENDERBUFFER_SIZE);
      this.profile.vertexTextureUnits = this.gl.getParameter(this.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
      this.profile.fragmentTextureUnits = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
      this.profile.combinedUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
      this.profile.maxVSattribs = this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);
      this.profile.maxVertexShaderUniforms = this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS);
      this.profile.maxFragmentShaderUniforms = this.gl.getParameter(this.gl.MAX_FRAGMENT_UNIFORM_VECTORS);
      this.profile.maxVaryings = this.gl.getParameter(this.gl.MAX_VARYING_VECTORS);
      this.profile.extensions = this.gl.getSupportedExtensions();
      BrowserDetect.init();
      this.profile.browser = BrowserDetect.browser;
      this.profile.os = BrowserDetect.OS;
      this.profile.version = BrowserDetect.version;
      function detectmob() { 
      if( navigator.userAgent.match(/Android/i)
      || navigator.userAgent.match(/webOS/i)
      || navigator.userAgent.match(/iPhone/i)
      || navigator.userAgent.match(/iPad/i)
      || navigator.userAgent.match(/iPod/i)
      || navigator.userAgent.match(/BlackBerry/i)
      || navigator.userAgent.match(/Windows Phone/i)
      ){
        return true;
      }
      else {
        return false;
      }
    };
      this.profile.mobile = detectmob();
      return console.log(this.profile);
    };

    App.prototype.run = function() {
      if (this._pause) {
        return;
      }
      if (this._framescounter > 0) {
        this._framescounter--;
        if (this._framescounter <= 0) {
          this.pause(true);
        }
      }
      this._draw();
      return this._update(this.getDelta());
    };

    App.prototype.pause = function(force) {
      if (force == null) {
        this._pause = !this._pause;
      } else {
        this._pause = force;
      }
      if (!this._pause) {
        this.startTime = Date.now();
        return this.oldTime = this.startTime;
      }
    };

    App.prototype.pauseAfter = function(numframes) {
      return this._framescounter = numframes;
    };

    App.prototype._init = function() {
      if (this.init != null) {
        this.init.call(this.app_context);
      }
      if (typeof window !== "undefined" && window !== null) {
        window.onEachFrame(this, this.run);
      }
      return this;
    };

    App.prototype.getDelta = function() {
      var deltaTime;
      deltaTime = Date.now() - this.oldTime;
      this.oldTime = Date.now();
      return deltaTime;
    };

    App.prototype.switchContext = function(context) {
      if (context != null) {
        CoffeeGL.Context = context;
        if (typeof window !== "undefined" && window !== null) {
          return window.GL = context.gl;
        }
      } else {
        if (CoffeeGL.Context !== this) {
          CoffeeGL.Context = this;
          if (typeof window !== "undefined" && window !== null) {
            return window.GL = this.gl;
          }
        }
      }
    };

    App.prototype.resize = function(w, h) {
      this.switchContext();
      if (this.canvas) {
        if (this.gl) {
          this.width = w;
          this.height = h;
          this.gl.viewportWidth = this.width;
          this.gl.viewportHeight = this.height;
          return this.gl.viewport(0, 0, this.gl.viewportWidth, this.gl.viewportHeight);
        }
      }
    };

    App.prototype._draw = function() {
      this.switchContext();
      if (this.draw != null) {
        return this.draw.call(this.app_context);
      }
    };

    App.prototype._update = function(dt) {
      this.switchContext();
      if (this.update != null) {
        return this.update.call(this.app_context, dt);
      }
    };

    return App;

  })();

  module.exports = {
    App: App
  };

}).call(this);
