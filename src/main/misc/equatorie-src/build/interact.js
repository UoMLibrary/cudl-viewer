// Generated by CoffeeScript 1.6.3
/*
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              Equatorie
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk
*/


(function() {
  var CoffeeGL, EquatorieInteract, EquatorieState, eq_text,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CoffeeGL = require('../lib/coffeegl/coffeegl').CoffeeGL;

  eq_text = {};

  eq_text["date_init"] = 'Before using the equatorium, the astronomer would first work out how many years and days had passed since 31 December 1392, the "radix" (baseline date) of the tables in the manuscript. They would consult the annual and daily tables to find the planet’s mean longitude and mean anomaly for the desired date.';

  eq_text["date_init_sun"] = 'Before using the equatorium, the astronomer would first work out how many years and days had passed since 31 December 1392, the "radix" (baseline date) of the tables in the manuscript. They would consult the annual and daily tables to find the Sun’s mean longitude for the desired date.';

  eq_text["date_init_latitude"] = 'Before using the equatorium, the astronomer would first use the tables in the manuscript to work out the Moon’s true motus and the true motus of Caput Draconis (the lunar node).  The latter should be subtracted from the former.';

  eq_text["rotate_plate"] = "The circular brass plate stores information about the planets' apogees. This must be rotated to account for changes in the apogees (owing to precession) since 1392.";

  eq_text["rotate_plate_sun"] = "The circular brass plate stores information about the Sun’s apogee. This rotates to account for changes in the apogees (owing to precession) since 1392.";

  eq_text["mean_motus"] = "Use the annual and daily tables to find the planet’s mean longitude ( %MM ) and mean anomaly (%MA) for the date you want.";

  eq_text["mean_motus_moon"] = "Use the annual and daily tables to find the Moon's mean longitude ( %MM ) and mean anomaly (%MA) for the date you want.";

  eq_text["mean_motus_latitude"] = "To begin using the equatorium, first use the tables in the manuscript to work out the Moon’s true motus and the true motus of Caput Draconis (the lunar node).  Subtract the latter from the former.";

  eq_text["mean_motus_sun"] = "Use the annual and daily tables to find the Sun’s mean longitude ( %MM) for the date you want.";

  eq_text["black_thread"] = "The black thread is moved so it runs from the Earth (centre of the disc) to the mean longitude (%MM) the scale on the disc runs anti-clockwise).";

  eq_text["white_thread"] = "The white thread is moved so it is parallel to the black thread, with one end fixed at the planet’s equant point.";

  eq_text["white_thread_mercury"] = "The white thread is moved so it is parallel to the black thread, with one end fixed at the planet’s equant point. Unlike the other planets, Mercury’s equant point is not fixed in the direction of its apogee, but moves on a little circle that is marked on the brass plate.";

  eq_text["white_thread_moon"] = "The white thread is moved so it runs from the Moon’s equant point (which is opposite the deferent centre on the little circle), over the centre of the epicycle.";

  eq_text["white_thread_sun"] = "The white thread is moved so it is parallel to the black thread, with one end fixed at the centre of the Sun’s eccentric circle.  Unlike the planets’ equant circles, the Sun’s eccentric circle is marked in full on the disc.";

  eq_text["black_thread_sun"] = "The black thread is moved so it runs from the Earth, through the point where the white thread cuts the Sun's eccentric circle, to the scale on the disc. The true longitude can be read there: it is ";

  eq_text["epicycle"] = 'The brass epicycle is moved and fixed to the planet’s deferent centre with a pin through its "common deferent centre".';

  eq_text["epicycle_moon"] = 'The brass epicycle is moved and fixed to the Moon\'s deferent centre with a pin through its "common deferent centre". Unlike the planets, the Moon has a deferent centre which moves around the little circle marked near the rim of the brass plate.';

  eq_text["epicycle_align"] = "The epicycle is rotated until its centre is under the white thread.";

  eq_text["epicycle_align_moon"] = "The epicycle is rotated until its centre is over the black thread.";

  eq_text["mean_aux"] = 'The "label" (pointer) is aligned with the white thread.';

  eq_text["label"] = "Taking this position as zero, the label is turned anti-clockwise to mark out the mean anomaly ( %MA )";

  eq_text["label_moon"] = "Taking this position as zero, turn the label to mark out the mean anomaly ( %MA ).  Note that unlike for the planets, the label should be rotated clockwise.";

  eq_text["black_final"] = "The black thread is moved so it runs from the Earth, through the the planet’s mark on the label, to the scale on the disc.  The true longitude can be read there: it is ";

  eq_text["black_final_moon"] = "The black thread is moved so it runs from the Earth, through the the Moon's mark on the label, to the scale on the disc.  The true longitude can be read there: it is ";

  eq_text["alhudda"] = "The white thread is moved so it is perpendicular to the graduated “Alhudda” line on the disc, and crosses the black thread where it cuts the scale of degrees.";

  eq_text["black_latitude"] = "The black thread is moved so it runs from the Earth (centre of the disc) to the value found in the last step.";

  eq_text["read_latitude"] = "The Moon's latitude can be read on the 0-5° scale marked on the Alhudda line: it is ";

  EquatorieState = (function() {
    function EquatorieState(_activate, func, duration) {
      this._activate = _activate;
      this.func = func;
      this.duration = duration != null ? duration : 3;
      if (this.duration == null) {
        this.duration = 3.0;
      }
    }

    EquatorieState.prototype.update = function(dt) {
      return this.func(dt);
    };

    EquatorieState.prototype.activate = function() {
      if (this._activate != null) {
        return this._activate();
      }
    };

    return EquatorieState;

  })();

  EquatorieInteract = (function() {
    function EquatorieInteract(system, physics, camera, white_start, white_end, black_start, black_end, epicycle, pointer, marker, plate, string_height) {
      this.system = system;
      this.physics = physics;
      this.camera = camera;
      this.white_start = white_start;
      this.white_end = white_end;
      this.black_start = black_start;
      this.black_end = black_end;
      this.epicycle = epicycle;
      this.pointer = pointer;
      this.marker = marker;
      this.plate = plate;
      this.string_height = string_height;
      this._stateReadLatitude = __bind(this._stateReadLatitude, this);
      this._stateReadLatitudeInit = __bind(this._stateReadLatitudeInit, this);
      this._stateMoveBlackStringLatitude = __bind(this._stateMoveBlackStringLatitude, this);
      this._stateMoveBlackStringLatitudeInit = __bind(this._stateMoveBlackStringLatitudeInit, this);
      this._stateMoveWhiteStringLatitude = __bind(this._stateMoveWhiteStringLatitude, this);
      this._stateMoveWhiteStringLatitudeInit = __bind(this._stateMoveWhiteStringLatitudeInit, this);
      this._stateMoveBlackStringFinal = __bind(this._stateMoveBlackStringFinal, this);
      this._stateMoveBlackStringFinalInit = __bind(this._stateMoveBlackStringFinalInit, this);
      this._stateRotateLabel = __bind(this._stateRotateLabel, this);
      this._stateRotateLabelInit = __bind(this._stateRotateLabelInit, this);
      this._stateRotateMeanAux = __bind(this._stateRotateMeanAux, this);
      this._stateRotateMeanAuxInit = __bind(this._stateRotateMeanAuxInit, this);
      this._stateRotateEpicycle = __bind(this._stateRotateEpicycle, this);
      this._stateRotateEpicycleInit = __bind(this._stateRotateEpicycleInit, this);
      this._stateMoveEpicycle = __bind(this._stateMoveEpicycle, this);
      this._stateMoveEpicycleInit = __bind(this._stateMoveEpicycleInit, this);
      this._stateMoveBlackThreadSun = __bind(this._stateMoveBlackThreadSun, this);
      this._stateMoveBlackThreadSunInit = __bind(this._stateMoveBlackThreadSunInit, this);
      this._stateMoveWhiteThreadSun = __bind(this._stateMoveWhiteThreadSun, this);
      this._stateMoveWhiteThreadSunInit = __bind(this._stateMoveWhiteThreadSunInit, this);
      this._stateMoveWhiteThreadMoon = __bind(this._stateMoveWhiteThreadMoon, this);
      this._stateMoveWhiteThreadMoonInit = __bind(this._stateMoveWhiteThreadMoonInit, this);
      this._stateMoveWhiteThread = __bind(this._stateMoveWhiteThread, this);
      this._stateMoveWhiteThreadInit = __bind(this._stateMoveWhiteThreadInit, this);
      this._stateMoveBlackThread = __bind(this._stateMoveBlackThread, this);
      this._stateMoveBlackThreadInit = __bind(this._stateMoveBlackThreadInit, this);
      this._stateCalculateMeanMotus = __bind(this._stateCalculateMeanMotus, this);
      this._stateCalculateMeanMotusInit = __bind(this._stateCalculateMeanMotusInit, this);
      this._stateRotatePlate = __bind(this._stateRotatePlate, this);
      this._stateRotatePlateInit = __bind(this._stateRotatePlateInit, this);
      this._stateSetPlanetDate = __bind(this._stateSetPlanetDate, this);
      this._stateSetPlanetDateInit = __bind(this._stateSetPlanetDateInit, this);
      this.mp = new CoffeeGL.Vec2(-1, -1);
      this.mpp = new CoffeeGL.Vec2(-1, -1);
      this.mpd = new CoffeeGL.Vec2(0, 0);
      this.picked = false;
      this.picked_item = void 0;
      this.dragging = false;
      this.advance_date = 0;
      this.move_poi = new CoffeeGL.Signal();
      if (typeof window !== "undefined" && window !== null) {
        window.EquatorieMovePOI = this.move_poi;
      }
      this.zoom_signal = new CoffeeGL.Signal();
      if (typeof window !== "undefined" && window !== null) {
        window.EquatorieZoomSignal = this.zoom_signal;
      }
      this.stack = [];
      this.stack_idx = 0;
      this.time = {
        start: 0,
        dt: 0
      };
      Date.prototype.addHours = function(h) {
        this.setHours(this.getHours() + h);
        return this;
      };
    }

    EquatorieInteract.prototype.update = function(dt) {
      var da;
      if (this.stack.length > 0) {
        if (this.time.dt / 1000 > this.stack[this.stack_idx].duration) {
          this.stack[this.stack_idx].update(1.0);
          return;
        } else if (this.time.dt < 0) {
          this.stack[this.stack_idx].update(0.0);
          return;
        } else {
          da = (this.time.dt / 1000) / this.stack[this.stack_idx].duration;
          this.stack[this.stack_idx].update(da);
          this.time.dt += dt;
        }
      }
      return this.time.start = new Date().getTime();
    };

    EquatorieInteract.prototype._setPOI = function(node) {
      var i0, i1, i2, vt;
      i0 = node.matrix;
      i1 = this.camera.m;
      i2 = this.camera.p.copy();
      vt = new CoffeeGL.Vec3(0, 0, 0.1);
      i2.mult(i1).mult(i0);
      i2.multVec(vt);
      return new CoffeeGL.Vec2((vt.x + 1) / 2 * CoffeeGL.Context.width, CoffeeGL.Context.height - ((vt.y + 1) / 2 * CoffeeGL.Context.height));
    };

    EquatorieInteract.prototype._setPOIVec = function(vp) {
      var i0, i1, i2, vt;
      i0 = new CoffeeGL.Matrix4();
      i0.setPos(vp);
      i1 = this.camera.m;
      i2 = this.camera.p.copy();
      vt = new CoffeeGL.Vec3(0, 0, 0.1);
      i2.mult(i1).mult(i0);
      i2.multVec(vt);
      return new CoffeeGL.Vec2((vt.x + 1) / 2 * CoffeeGL.Context.width, CoffeeGL.Context.height - ((vt.y + 1) / 2 * CoffeeGL.Context.height));
    };

    EquatorieInteract.prototype._stateSetPlanetDateInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["date_init"]);
      if (this.chosen_planet === "sun") {
        current_state.text = this._replaceText(eq_text["date_init_sun"]);
      } else if (this.chosen_planet === "moon_latitude") {
        current_state.text = this._replaceText(eq_text["date_init_latitude"]);
      }
      current_state.pos = this._setPOI(this.epicycle);
      this.marker.descend = false;
      return this;
    };

    EquatorieInteract.prototype._replaceText = function(text) {
      var t, ta;
      ta = this.system.state.pointerAngle;
      if (ta < 1) {
        ta *= -1;
      }
      t = text.replace(/%MA/, ta.toFixed(2));
      if (this.chosen_planet === "sun") {
        ta = this.system.state.sunMeanMotus;
        if (ta < 1) {
          ta *= -1;
        }
        t = t.replace(/%MM/, ta.toFixed(2));
      } else {
        ta = this.system.state.meanMotus;
        if (ta < 1) {
          ta *= -1;
        }
        t = t.replace(/%MM/, ta.toFixed(2));
      }
      return t;
    };

    EquatorieInteract.prototype._stateSetPlanetDate = function(planet, date) {
      this.system.solveForPlanetDate(planet, date);
      return this;
    };

    EquatorieInteract.prototype._stateRotatePlateInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["rotate_plate"]);
      if (this.chosen_planet === "sun") {
        current_state.text = this._replaceText(eq_text["rotate_plate_sun"]);
      }
      this.marker.descend = false;
      current_state.pos = this._setPOI(this.plate);
      this.plate.matrix.identity();
      return current_state.plate_interp = new CoffeeGL.Interpolation(0, CoffeeGL.degToRad(this.system.precession * this.system.state.passed));
    };

    EquatorieInteract.prototype._stateRotatePlate = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.pos = this._setPOI(this.plate);
      this.move_poi.dispatch(current_state.pos);
      this.plate.matrix.identity();
      return this.plate.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), current_state.plate_interp.set(dt));
    };

    EquatorieInteract.prototype._stateCalculateMeanMotusInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["mean_motus"]);
      if (this.chosen_planet === "moon") {
        current_state.text = this._replaceText(eq_text["mean_motus_moon"]);
      }
      if (this.chosen_planet === "moon_latitude") {
        current_state.text = this._replaceText(eq_text["mean_motus_latitude"]);
      }
      if (this.chosen_planet === "sun") {
        current_state.text = this._replaceText(eq_text["mean_motus_sun"]);
      }
      current_state.pos = this._setPOI(this.epicycle);
      this.marker.descend = false;
      return this;
    };

    EquatorieInteract.prototype._stateCalculateMeanMotus = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.pos = this._setPOI(this.epicycle);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateMoveBlackThreadInit = function() {
      var current_state, mv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["black_thread"]);
      current_state.pos = this._setPOI(this.black_end);
      mv = this.system.state.meanMotusPosition.copy();
      mv.normalize();
      mv.multScalar(8.0);
      current_state.end_interp = new CoffeeGL.Interpolation(this.black_end.matrix.getPos(), new CoffeeGL.Vec3(mv.x, this.string_height, mv.y));
      current_state.start_interp = new CoffeeGL.Interpolation(this.black_start.matrix.getPos(), new CoffeeGL.Vec3(0, this.string_height, 0));
      return this.marker.descend = false;
    };

    EquatorieInteract.prototype._stateMoveBlackThread = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.black_start.matrix.setPos(current_state.start_interp.set(dt));
      this.black_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "black_start_move",
        data: this.black_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      current_state.pos = this._setPOI(this.black_end);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateMoveWhiteThreadInit = function() {
      var current_state, eq, pv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["white_thread"]);
      if (this.chosen_planet === "mercury") {
        current_state.text = eq_text["white_thread_mercury"];
      }
      eq = this.system.state.equantPosition;
      pv = this.system.state.parallelPosition;
      pv.sub(eq);
      pv.normalize();
      pv.multScalar(8.0);
      pv.add(eq);
      current_state.end_interp = new CoffeeGL.Interpolation(this.white_end.matrix.getPos(), new CoffeeGL.Vec3(pv.x, this.string_height, pv.y));
      eq = this.system.state.equantPosition;
      current_state.start_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), new CoffeeGL.Vec3(eq.x, this.string_height, eq.y));
      return this.marker.descend = false;
    };

    EquatorieInteract.prototype._stateMoveWhiteThread = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.white_start.matrix.setPos(current_state.start_interp.set(dt));
      this.white_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
      current_state.pos = this._setPOI(this.white_end);
      return this.move_poi.dispatch(current_state.pos);
    };

    EquatorieInteract.prototype._stateMoveWhiteThreadMoonInit = function() {
      var current_state, eq, pv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["white_thread_moon"]);
      pv = this.system.state.epicyclePosition.copy();
      pv.sub(this.system.state.equantPosition);
      pv.normalize();
      pv.multScalar(8.0);
      pv.add(this.system.state.equantPosition);
      pv = new CoffeeGL.Vec3(pv.x, this.string_height, pv.y);
      current_state.end_interp = new CoffeeGL.Interpolation(this.white_end.matrix.getPos(), pv);
      eq = this.system.state.equantPosition;
      return current_state.start_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), new CoffeeGL.Vec3(eq.x, this.string_height, eq.y));
    };

    EquatorieInteract.prototype._stateMoveWhiteThreadMoon = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.white_start.matrix.setPos(current_state.start_interp.set(dt));
      this.white_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
      current_state.pos = this._setPOI(this.white_end);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateMoveWhiteThreadSunInit = function() {
      var current_state, ev, pv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["white_thread_sun"]);
      ev = new CoffeeGL.Vec3(this.system.state.equantPosition.x, this.string_height, this.system.state.equantPosition.y);
      current_state.end_interp = new CoffeeGL.Interpolation(this.white_end.matrix.getPos(), ev);
      pv = this.system.state.parallelPosition.copy();
      pv.sub(this.system.state.equantPosition);
      pv.normalize();
      pv.multScalar(8.0);
      pv.add(this.system.state.equantPosition);
      pv = new CoffeeGL.Vec3(pv.x, this.string_height, pv.y);
      return current_state.start_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), pv);
    };

    EquatorieInteract.prototype._stateMoveWhiteThreadSun = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.pos = this._setPOI(this.white_end);
      this.move_poi.dispatch(current_state.pos);
      this.white_start.matrix.setPos(current_state.start_interp.set(dt));
      this.white_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
      return this;
    };

    EquatorieInteract.prototype._stateMoveBlackThreadSunInit = function() {
      var current_state, pv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["black_thread_sun"] + this.system.state.truePlace.toFixed(2) + ".");
      current_state.pos = this._setPOIVec(new CoffeeGL.Vec3(this.system.state.sunCirclePoint.x, 0, this.system.state.sunCirclePoint.y));
      pv = this.system.state.sunCirclePoint.copy();
      pv.normalize();
      pv.multScalar(8.0);
      pv = new CoffeeGL.Vec3(pv.x, this.string_height, pv.y);
      return current_state.end_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), pv);
    };

    EquatorieInteract.prototype._stateMoveBlackThreadSun = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.black_end.matrix.setPos(current_state.end_interp.set(dt));
      current_state.pos = this._setPOIVec(new CoffeeGL.Vec3(this.system.state.sunCirclePoint.x, 0, this.system.state.sunCirclePoint.y));
      this.move_poi.dispatch(current_state.pos);
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      return this;
    };

    EquatorieInteract.prototype._stateMoveEpicycleInit = function() {
      var c, current_state, d, dr, e, v;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["epicycle"]);
      if (this.chosen_planet === "moon") {
        current_state.text = this._replaceText(eq_text["epicycle_moon"]);
      }
      d = this.system.state.deferentPosition;
      c = this.system.state.basePosition;
      v = this.system.state.parallelPosition;
      dr = this.system.state.deferentAngle;
      if (this.chosen_planet === "mercury") {
        dr = this.system.state.mercuryDeferentAngle;
      }
      e = this.system.state.epicyclePrePosition;
      current_state.pos_interp = new CoffeeGL.Interpolation(this.epicycle.matrix.getPos(), new CoffeeGL.Vec3(e.x, 0, e.y));
      current_state.rot_interp = new CoffeeGL.Interpolation(0, -90 - dr);
      return this.marker.descend = true;
    };

    EquatorieInteract.prototype._stateMoveEpicycle = function(dt) {
      var current_state, _ref;
      current_state = this.stack[this.stack_idx];
      this.epicycle.matrix.identity();
      this.epicycle.matrix.translate(current_state.pos_interp.set(dt));
      this.epicycle.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(current_state.rot_interp.set(dt)));
      this.marker.matrix.identity();
      if (this.chosen_planet === "mercury") {
        this.marker.matrix.translate(new CoffeeGL.Vec3(this.system.state.mercuryDeferentPosition.x, this.string_height, this.system.state.mercuryDeferentPosition.y));
      } else if ((_ref = this.chosen_planet) === "mars" || _ref === "venus" || _ref === "jupiter" || _ref === "saturn" || _ref === "moon") {
        this.marker.matrix.translate(new CoffeeGL.Vec3(this.system.state.deferentPosition.x, this.string_height, this.system.state.deferentPosition.y));
      }
      current_state.pos = this._setPOI(this.marker);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateRotateEpicycleInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["epicycle_align"]);
      if (this.chosen_planet === "moon") {
        current_state.text = this._replaceText(eq_text["epicycle_align_moon"]);
      }
      current_state.rot_interp = new CoffeeGL.Interpolation(0, this.system.state.epicycleRotation);
      return this.marker.descend = true;
    };

    EquatorieInteract.prototype._stateRotateEpicycle = function(dt) {
      var current_state, deferentAngle, fmatrix, tmatrix, v1, v2;
      current_state = this.stack[this.stack_idx];
      v1 = this.system.state.deferentPosition;
      if (this.chosen_planet === "mercury") {
        v1 = this.system.state.mercuryDeferentPosition;
      }
      v2 = CoffeeGL.Vec2.sub(this.system.state.epicyclePrePosition, v1);
      tmatrix = new CoffeeGL.Matrix4();
      fmatrix = new CoffeeGL.Matrix4();
      deferentAngle = this.system.state.deferentAngle;
      if (this.chosen_planet === "mercury") {
        deferentAngle = this.system.state.mercuryDeferentAngle;
      }
      tmatrix.translate(new CoffeeGL.Vec3(v2.x, 0, v2.y));
      tmatrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(-90 - deferentAngle));
      fmatrix.translate(new CoffeeGL.Vec3(v1.x, 0, v1.y));
      fmatrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(current_state.rot_interp.set(dt)));
      this.epicycle.matrix.copyFrom(fmatrix.mult(tmatrix));
      current_state.pos = this._setPOI(this.epicycle);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateRotateMeanAuxInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["mean_aux"]);
      return current_state.rot_interp = new CoffeeGL.Interpolation(0, this.system.state.meanAux);
    };

    EquatorieInteract.prototype._stateRotateMeanAux = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.pointer.matrix.identity();
      this.pointer.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(current_state.rot_interp.set(dt)));
      current_state.pos = this._setPOI(this.epicycle);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateRotateLabelInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["label"]);
      if (this.chosen_planet === "moon") {
        current_state.text = this._replaceText(eq_text["label_moon"]);
      }
      return current_state.rot_interp = new CoffeeGL.Interpolation(0, this.system.state.pointerAngle);
    };

    EquatorieInteract.prototype._stateRotateLabel = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.pointer.matrix.identity();
      this.pointer.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(this.system.state.meanAux + current_state.rot_interp.set(dt)));
      current_state.pos = this._setPOI(this.marker);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateMoveBlackStringFinalInit = function() {
      var current_state, mv;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["black_final"] + this.system.state.truePlace.toFixed(2) + ".");
      if (this.chosen_planet === "moon") {
        current_state.text = this._replaceText(eq_text["black_final_moon"] + this.system.state.truePlace.toFixed(2) + ".");
      }
      mv = new CoffeeGL.Vec3(this.system.state.pointerPoint.x, 0, this.system.state.pointerPoint.y);
      mv.normalize();
      mv.multScalar(8.0);
      mv.y = this.string_height;
      return current_state.end_interp = new CoffeeGL.Interpolation(this.black_end.matrix.getPos(), mv);
    };

    EquatorieInteract.prototype._stateMoveBlackStringFinal = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.black_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      current_state.pos = this._setPOI(this.black_end);
      this.move_poi.dispatch(current_state.pos);
      return this;
    };

    EquatorieInteract.prototype._stateMoveWhiteStringLatitudeInit = function() {
      var current_state, e, s;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["alhudda"]);
      s = new CoffeeGL.Vec3(this.system.state.moonLatitudeLeft.x, 0, this.system.state.moonLatitudeLeft.y);
      e = new CoffeeGL.Vec3(this.system.state.moonLatitudeRight.x, 0, this.system.state.moonLatitudeRight.y);
      s.x = -5.5;
      e.x = 5.5;
      s.y = this.string_height;
      e.y = this.string_height;
      current_state.start_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), s);
      return current_state.end_interp = new CoffeeGL.Interpolation(this.white_end.matrix.getPos(), e);
    };

    EquatorieInteract.prototype._stateMoveWhiteStringLatitude = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.white_start.matrix.setPos(current_state.start_interp.set(dt));
      this.white_end.matrix.setPos(current_state.end_interp.set(dt));
      current_state.pos = this._setPOI(this.white_end);
      this.move_poi.dispatch(current_state.pos);
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
      return this;
    };

    EquatorieInteract.prototype._stateMoveBlackStringLatitudeInit = function() {
      var current_state, e, s;
      current_state = this.stack[this.stack_idx];
      current_state.text = this._replaceText(eq_text["black_latitude"]);
      s = new CoffeeGL.Vec3(0, 0, 0);
      e = new CoffeeGL.Vec3(this.system.state.moonLatitudeRight.x, 0, this.system.state.moonLatitudeRight.y);
      s.y = this.string_height;
      e.y = this.string_height;
      current_state.start_interp = new CoffeeGL.Interpolation(this.black_start.matrix.getPos(), s);
      return current_state.end_interp = new CoffeeGL.Interpolation(this.black_end.matrix.getPos(), e);
    };

    EquatorieInteract.prototype._stateMoveBlackStringLatitude = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      this.black_start.matrix.setPos(current_state.start_interp.set(dt));
      this.black_end.matrix.setPos(current_state.end_interp.set(dt));
      current_state.pos = this._setPOI(this.black_end);
      this.move_poi.dispatch(current_state.pos);
      this.physics.postMessage({
        cmd: "black_start_move",
        data: this.black_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      return this;
    };

    EquatorieInteract.prototype._stateReadLatitudeInit = function() {
      var current_state;
      current_state = this.stack[this.stack_idx];
      return current_state.text = this._replaceText(eq_text["read_latitude"] + this.system.state.moonLatitudeFinal.toFixed(2));
    };

    EquatorieInteract.prototype._stateReadLatitude = function(dt) {
      var current_state;
      current_state = this.stack[this.stack_idx];
      current_state.pos = this._setPOIVec(new CoffeeGL.Vec3(this.system.state.moonLatitudeCentre.x, this.string_height, this.system.state.moonLatitudeCentre.y));
      return this.move_poi.dispatch(current_state.pos);
    };

    EquatorieInteract.prototype.addStates = function(planet, date) {
      var _this = this;
      this.stack = [];
      if (planet === 'mars' || planet === 'venus' || planet === 'jupiter' || planet === 'saturn' || planet === 'mercury') {
        this.stack.push(new EquatorieState(this._stateSetPlanetDateInit, function() {
          return (function(planet, date) {
            return _this._stateSetPlanetDate(planet, date);
          })(planet, date);
        }));
        this.stack.push(new EquatorieState(this._stateRotatePlateInit, this._stateRotatePlate));
        this.stack.push(new EquatorieState(this._stateMoveBlackThreadInit, this._stateMoveBlackThread));
        this.stack.push(new EquatorieState(this._stateMoveWhiteThreadInit, this._stateMoveWhiteThread));
        this.stack.push(new EquatorieState(this._stateMoveEpicycleInit, this._stateMoveEpicycle));
        this.stack.push(new EquatorieState(this._stateRotateEpicycleInit, this._stateRotateEpicycle));
        this.stack.push(new EquatorieState(this._stateRotateMeanAuxInit, this._stateRotateMeanAux));
        this.stack.push(new EquatorieState(this._stateRotateLabelInit, this._stateRotateLabel));
        return this.stack.push(new EquatorieState(this._stateMoveBlackStringFinalInit, this._stateMoveBlackStringFinal));
      } else if (planet === 'moon') {
        this.stack.push(new EquatorieState(this._stateSetPlanetDateInit, function() {
          return (function(planet, date) {
            return _this._stateSetPlanetDate(planet, date);
          })(planet, date);
        }));
        this.stack.push(new EquatorieState(this._stateMoveBlackThreadInit, this._stateMoveBlackThread));
        this.stack.push(new EquatorieState(this._stateMoveEpicycleInit, this._stateMoveEpicycle));
        this.stack.push(new EquatorieState(this._stateRotateEpicycleInit, this._stateRotateEpicycle));
        this.stack.push(new EquatorieState(this._stateMoveWhiteThreadMoonInit, this._stateMoveWhiteThreadMoon));
        this.stack.push(new EquatorieState(this._stateRotateMeanAuxInit, this._stateRotateMeanAux));
        this.stack.push(new EquatorieState(this._stateRotateLabelInit, this._stateRotateLabel));
        return this.stack.push(new EquatorieState(this._stateMoveBlackStringFinalInit, this._stateMoveBlackStringFinal));
      } else if (planet === "moon_latitude") {
        this.system.solveForPlanetDate(planet, date);
        this.stack.push(new EquatorieState(this._stateCalculateMeanMotusInit, this._stateCalculateMeanMotus));
        this.stack.push(new EquatorieState(this._stateMoveBlackStringLatitudeInit, this._stateMoveBlackStringLatitude));
        this.stack.push(new EquatorieState(this._stateMoveWhiteStringLatitudeInit, this._stateMoveWhiteStringLatitude));
        return this.stack.push(new EquatorieState(this._stateReadLatitudeInit, this._stateReadLatitude));
      } else if (planet === "sun") {
        this.stack.push(new EquatorieState(this._stateSetPlanetDateInit, function() {
          return (function(planet, date) {
            return _this._stateSetPlanetDate(planet, date);
          })(planet, date);
        }));
        this.stack.push(new EquatorieState(this._stateRotatePlateInit, this._stateRotatePlate));
        this.stack.push(new EquatorieState(this._stateMoveBlackThreadInit, this._stateMoveBlackThread));
        this.stack.push(new EquatorieState(this._stateMoveWhiteThreadSunInit, this._stateMoveWhiteThreadSun));
        return this.stack.push(new EquatorieState(this._stateMoveBlackThreadSunInit, this._stateMoveBlackThreadSun));
      }
    };

    EquatorieInteract.prototype.reset = function() {
      this.stack = [];
      this.stack_idx = 0;
      this.system.reset();
      this.marker.matrix.identity();
      this.epicycle.matrix.identity();
      this.pointer.matrix.identity();
      this.white_start.matrix.identity().translate(new CoffeeGL.Vec3(2, this.string_height, 2));
      this.white_end.matrix.identity().translate(new CoffeeGL.Vec3(-2, this.string_height, -2));
      this.black_start.matrix.identity().translate(new CoffeeGL.Vec3(-2, this.string_height, 2));
      this.black_end.matrix.identity().translate(new CoffeeGL.Vec3(-4, this.string_height, 2));
      this.camera.pos = new CoffeeGL.Vec3(0, 0, 10);
      this.camera.look = new CoffeeGL.Vec3(0, 0, 0);
      this.camera.up = new CoffeeGL.Vec3(0, 1, 0);
      this.camera.orbit(new CoffeeGL.Vec3(1, 0, 0), CoffeeGL.degToRad(-25));
      this.physics.postMessage({
        cmd: "reset"
      });
      return this.marker.descend = false;
    };

    EquatorieInteract.prototype.solveImmediate = function() {
      var rval, s, tidx;
      tidx = this.stack_idx;
      this.stack = [];
      this.stack_idx = 0;
      this.system.reset();
      this.addStates(this.chosen_planet, this.date);
      s = 0;
      while (s < tidx) {
        this.stepForward();
        s += 1;
      }
      this.stack[this.stack_idx].activate();
      rval = {};
      if (this.stack[this.stack_idx].text != null) {
        rval.text = this.stack[this.stack_idx].text;
      }
      if (this.stack[this.stack_idx].pos != null) {
        rval.pos = this.stack[this.stack_idx].pos;
      }
      return rval;
    };

    EquatorieInteract.prototype.onMouseDown = function(event) {
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.ray = this.camera.castRay(this.mp.x, this.mp.y);
      this.mdown = true;
      if (!this.picked) {
        return this.camera.onMouseDown(event);
      } else {
        return this.dragging = true;
      }
    };

    EquatorieInteract.prototype.onMouseMove = function(event) {
      var d, dd, np, p0, p1, tp, tray;
      this.mpp.x = this.mp.x;
      this.mpp.y = this.mp.y;
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.mpd.x = this.mp.x - this.mpp.x;
      this.mpd.y = this.mp.y - this.mpp.y;
      if (this.dragging) {
        tray = this.camera.castRay(this.mp.x, this.mp.y);
        d = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, this.ray);
        dd = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, tray);
        p0 = tray.copy();
        p0.multScalar(dd);
        p0.add(this.camera.pos);
        p1 = this.ray.copy();
        p1.multScalar(d);
        p1.add(this.camera.pos);
        p0.y = this.string_height;
        p1.y = this.string_height;
        np = CoffeeGL.Vec3.sub(p0, p1);
        this.ray.copyFrom(tray);
        if (this.picked_item !== this.pointer) {
          tp = this.picked_item.matrix.getPos();
          this.picked_item.matrix.setPos(tp.add(np));
        }
        if (this.picked_item === this.white_start) {
          return this.physics.postMessage({
            cmd: "white_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.white_end) {
          return this.physics.postMessage({
            cmd: "white_end_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_start) {
          return this.physics.postMessage({
            cmd: "black_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_end) {
          return this.physics.postMessage({
            cmd: "black_end_move",
            data: this.picked_item.matrix.getPos()
          });
        }
      } else {
        return this.camera.onMouseMove(event);
      }
    };

    EquatorieInteract.prototype.checkPicked = function(p) {
      if (this.dragging) {
        return;
      }
      this.picked = false;
      if (p[0] === 255 && p[1] === 0 && p[2] === 0) {
        this.picked_item = this.white_start;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.white_end;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 0 && p[2] === 255) {
        this.picked_item = this.black_start;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.black_end;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.epicycle;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.pointer;
        return this.picked = true;
      }
    };

    EquatorieInteract.prototype._initGUI = function() {
      var controller, planets,
        _this = this;
      this.datgui = new dat.GUI();
      this.datgui.remember(this);
      planets = ["mars", "venus", "jupiter", "saturn", "mercury", "moon", "sun", "moon_latitude"];
      this.chosen_planet = "mars";
      controller = this.datgui.add(this, 'chosen_planet', planets);
      controller = this.datgui.add(this, 'solveForCurrentDatePlanet');
      controller = this.datgui.add(this, 'advance_date', 0, 730);
      controller.onChange(function(value) {
        return _this.solveForCurrentDatePlanet();
      });
      controller = this.datgui.add(this, "stepForward");
      controller = this.datgui.add(this, "reset");
      controller = this.datgui.add(this.pointer, 'uAlphaX', 0, 1);
      controller = this.datgui.add(this.pointer, 'uAlphaY', 0, 1);
      controller = this.datgui.add(this.epicycle, 'uAlphaX', 0, 1);
      return controller = this.datgui.add(this.epicycle, 'uAlphaY', 0, 1);
    };

    EquatorieInteract.prototype.stepForward = function() {
      var rval;
      this.time.start = new Date().getTime();
      if (this.stack.length === 0) {
        this.addStates(this.chosen_planet, this.date);
        this.stack_idx = 0;
      } else {
        if (this.stack_idx + 1 < this.stack.length) {
          this.stack[this.stack_idx].update(1.0);
          this.time.dt = 0;
          this.stack_idx += 1;
        }
      }
      this.stack[this.stack_idx].activate();
      rval = {};
      if (this.stack[this.stack_idx].text != null) {
        rval.text = this.stack[this.stack_idx].text;
      }
      if (this.stack[this.stack_idx].pos != null) {
        rval.pos = this.stack[this.stack_idx].pos;
      }
      return rval;
    };

    EquatorieInteract.prototype.stepBackward = function() {
      var rval;
      this.time.start = new Date().getTime();
      if (this.stack.length !== 0) {
        if (this.stack_idx - 1 >= 0) {
          this.stack[this.stack_idx].update(0.0);
          this.time.dt = 0;
          this.stack_idx -= 1;
          this.stack[this.stack_idx].update(0.0);
          this.stack[this.stack_idx].activate();
        }
      }
      rval = {};
      if (this.stack[this.stack_idx].text != null) {
        rval.text = this.stack[this.stack_idx].text;
      }
      if (this.stack[this.stack_idx].pos != null) {
        rval.pos = this.stack[this.stack_idx].pos;
      }
      return rval;
    };

    EquatorieInteract.prototype.setDate = function(date) {
      if (date == null) {
        this.date = new Date();
        this.date.setDate(this.date.getDate() + this.advance_date);
      } else if (date instanceof Date) {
        this.date = date;
      }
      if (this.date.getHours !== 12) {
        return this.date.setHours(12);
      }
    };

    EquatorieInteract.prototype.setZoom = function(dz) {
      return this.camera.zoom(dz);
    };

    EquatorieInteract.prototype.onMouseOver = function(event) {
      this.mp.x = event.mouseX;
      return this.mp.y = event.mouseY;
    };

    EquatorieInteract.prototype.onMouseUp = function(event) {
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    EquatorieInteract.prototype.onMouseOut = function(event) {
      this.mp.x = this.mpp.x = -1;
      this.mp.y = this.mpp.y = -1;
      this.mpd.x = this.mpd.y = 0;
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    EquatorieInteract.prototype._checkCameraZoom = function() {
      var camera_zoom, dir, dl;
      dir = CoffeeGL.Vec3.sub(this.camera.look, this.camera.pos);
      dl = dir.length();
      camera_zoom = dl / (this.camera.zoom_far - this.camera.zoom_near);
      return this.zoom_signal.dispatch(camera_zoom);
    };

    EquatorieInteract.prototype.onMouseWheel = function(event) {
      return this._checkCameraZoom();
    };

    EquatorieInteract.prototype.onTouchPinch = function(event) {
      return this._checkCameraZoom();
    };

    EquatorieInteract.prototype.onTouchSpread = function(event) {
      return this._checkCameraZoom();
    };

    return EquatorieInteract;

  })();

  module.exports = {
    EquatorieInteract: EquatorieInteract
  };

}).call(this);
