<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
               http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.2.xsd
            http://www.springframework.org/schema/security/oauth2
http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <import resource="../datasource/itemsFactory.xml" />

    <context:annotation-config />
    <!-- This is where we configure Spring-Security -->
    <!-- <security:http auto-config="false" use-expressions="true" access-denied-page="/auth/denied/">
        <security:intercept-url pattern="/auth/login/" access="permitAll" /> <security:intercept-url
        pattern="/auth/denied/" access="permitAll" /> <security:intercept-url pattern="/mylibrary/**"
        access="hasRole('ROLE_USER')" /> Adding the openid-login tag activates Spring
        Security's support for OpenID <security:openid-login login-page="/auth/login/"
        authentication-failure-url="/auth/login/?error=true" default-target-url="/mylibrary/"
        user-service-ref="MyUserDetailsService"> </security:openid-login> <security:logout
        invalidate-session="true" logout-success-url="/auth/login/" logout-url="/auth/logout/"
        /> </security:http> -->


    <security:debug />
    

<!--     <oauth:resource id="google" type="authorization_code"
        client-id="${google.clientId}" client-secret="${google.clientSecret}"
access-token-uri="https://accounts.google.com/o/oauth2/token"
user-authorization-uri="https://accounts.google.com/o/oauth2/auth?openid.realm=http://localhost:1111/"
        scope="profile openid"
        client-authentication-scheme="form"
pre-established-redirect-uri="http://localhost:1111/" /> -->

    <bean id="google" class="ulcambridge.foundations.viewer.authentication.ExtendedBaseOAuth2ProtectedResourceDetails">
  <property name="clientId" value="${google.clientId}"></property>
  <property name="clientSecret" value="${google.clientSecret}"></property>  
  <property name="accessTokenUri" value="https://accounts.google.com/o/oauth2/token"></property>
  <property name="userAuthorizationUri" value="https://accounts.google.com/o/oauth2/auth?openid.realm=http://localhost:1111/"></property>  
  <property name="scope" value="#{{'profile','openid'}}"></property>
  <property name="clientAuthenticationScheme" value="form"></property>
  <property name="preEstablishedRedirectUri" value="http://localhost:1111/"></property>
      
</bean>

    <oauth:rest-template id="googleLoginRestTemplate"
        resource="google"  />

    <security:http access-denied-page="/auth/denied?authorization_error=true"
         auto-config="true">

        <security:form-login login-page='/auth/login'/>
        <security:intercept-url pattern="/mylibrary" access="ROLE_USER" />
    
        <security:custom-filter ref="oauth2ClientFilter"
            after="EXCEPTION_TRANSLATION_FILTER" />
<!--         <security:custom-filter ref="authProcessingFilter"
            after="PRE_AUTH_FILTER" /> -->
        
        
    </security:http>


    <!--apply the oauth client context -->

    <oauth:client id="oauth2ClientFilter" />

    <!-- This is a dummy authentication entry point that just serves as an empty
        default entry point as we cannot use default http security configuration. -->
     <!-- <bean id="authenticationEntryPoint"
class="ulcambridge.foundations.viewer.authentication.SystemAuthenticationEntryPoint" /> 

      <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/> -->
    
<!--  NOTE THIS IS NOT USED -->
<!-- <authentication-manager xmlns="http://www.springframework.org/schema/security">
    <authentication-provider>
        <user-service>
            <user name="test" password="test" authorities="ROLE_USER" />
        </user-service>
    </authentication-provider>
</authentication-manager> -->

<!--     <security:authentication-manager alias="defaultAuthenticationManager">
        <security:authentication-provider
            ref="authenticationProvider" />
    </security:authentication-manager>-->
<!--     <bean id="authProcessingFilter"
class="ulcambridge.foundations.viewer.authentication.OAuth2AuthenticationProcessingFilter">
        <property name="authenticationManager" ref="defaultAuthenticationManager" />
        <property name="key" value="myapp" />
    </bean>  -->
    <!-- BEWARE: ******* This authentication provider is used here to simplify
        the demo application. Use a *real* authentication provider in production! -->
<!--     <bean id="authenticationProvider"
class="org.springframework.security.authentication.AnonymousAuthenticationProvider" >
        <property name="key" value="myapp" />
        </bean> -->

    <!-- END OF EXTRA STUFF -->

<!--      <security:authentication-manager alias="defaultAuthenticationManager"> <security:authentication-provider>
        <security:jdbc-user-service data-source-ref="dataSource" /> </security:authentication-provider>
        </security:authentication-manager>  -->


    <bean id="usersDao"
class="ulcambridge.foundations.viewer.authentication.UsersDBDao">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="MyUserDetailsService"
class="ulcambridge.foundations.viewer.authentication.UserDetailsServiceImpl">
        <property name="usersDao" ref="usersDao" />
    </bean>

</beans>
