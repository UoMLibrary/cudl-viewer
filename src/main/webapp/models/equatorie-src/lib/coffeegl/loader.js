// Generated by CoffeeScript 1.6.1

/* ABOUT
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk

This software is released under the MIT Licence. See LICENCE.txt for details


- Resources

- TODO
  * Load Items should make a guess at the filesize of the thing they are loading
*/


(function() {
  var LoadItem, LoadQueue, Signal;

  Signal = require('./signal').Signal;

  /*LoadItem
  */


  LoadItem = (function() {

    function LoadItem(func) {
      this.func = func;
    }

    LoadItem.prototype.loaded = function() {
      CoffeeGL.Context.switchContext(this._context);
      return this.loader.itemCompleted(this);
    };

    return LoadItem;

  })();

  /*LoadQueue
  */


  LoadQueue = (function() {

    function LoadQueue(obj, onLoaded, onFinish) {
      this.obj = obj;
      this.onLoaded = onLoaded;
      this.onFinish = onFinish;
      this.items = [];
      this.completed_items = [];
      this.complete = new CoffeeGL.Signal();
      this._context = CoffeeGL.Context;
      if (this.onFinish != null) {
        this.complete.add(onFinish, this);
      }
      this;
    }

    LoadQueue.prototype.itemCompleted = function(item) {
      this.completed_items.push(item);
      if (this.onLoaded != null) {
        this.onLoaded();
      }
      if (this.completed_items.length === this.items.length) {
        this.complete.dispatch();
      }
      return this;
    };

    LoadQueue.prototype.add = function(item) {
      item.obj = this.obj;
      item.loader = this;
      item._context = this._context;
      this.items.push(item);
      return this;
    };

    LoadQueue.prototype.start = function() {
      var item, _i, _len, _ref;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.func();
      }
      return this;
    };

    return LoadQueue;

  })();

  module.exports = {
    LoadItem: LoadItem,
    LoadQueue: LoadQueue
  };

}).call(this);
