// Generated by CoffeeScript 1.6.1

/* ABOUT
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk

This software is released under the MIT Licence. See LICENCE.txt for details


Library of Shader functions
- TODO 
  * Load in snippets externally for this uber shader lib
  * Possibly add a vertex_main or similar to setup things? - 
    YES! Missing setting varyings is a pain in the ass! ><
*/


/*ShaderLibrary
*/


(function() {
  var ShaderLibrary;

  ShaderLibrary = (function() {

    function ShaderLibrary() {}

    ShaderLibrary.Basic = {
      vertex: "attribute vec3 aVertexPosition;uniform mat4 uModelMatrix;",
      fragment: ""
    };

    ShaderLibrary.VertexColour = {
      vertex: "attribute vec4 aVertexColour; varying vec4 vColour;",
      fragment: "varying vec4 vColour;"
    };

    ShaderLibrary.VertexTexCoord = {
      vertex: "attribute vec2 aVertexTexCoord; varying vec2 vTexCoord;",
      fragment: "varying vec2 vTexCoord;"
    };

    ShaderLibrary.BasicCamera = {
      vertex: "uniform mat4 uCameraMatrix; uniform mat4 uProjectionMatrix; uniform mat4 uCameraInverseMatrix;",
      fragment: ""
    };

    ShaderLibrary.CameraExtra = {
      vertex: "uniform float uCameraNear; uniform float uCameraFar;",
      fragment: "uniform float uCameraNear; uniform float uCameraFar;"
    };

    ShaderLibrary.VertexNormal = {
      vertex: "attribute vec3 aVertexNormal;varying vec3 vNormal;uniform mat3 uNormalMatrix;",
      fragment: "varying vec3 vNormal;"
    };

    ShaderLibrary.BasicMaterial = {
      vertex: "",
      fragment: "uniform vec3 uMaterialAmbientColor;uniform vec3 uMaterialDiffuseColor;uniform vec3 uMaterialSpecularColor;uniform float uMaterialShininess;uniform vec3 uMaterialEmissiveColor;"
    };

    ShaderLibrary.VertexTangent = {
      vertex: "attribute vec3 aVertexTangent;varying vec3 vTangent;",
      fragment: "varying vec3 vTangent;"
    };

    return ShaderLibrary;

  })();

  module.exports = {
    ShaderLibrary: ShaderLibrary
  };

}).call(this);
