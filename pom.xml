<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ulcambridge.foundations.viewer</groupId>
    <artifactId>FoundationsViewer</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!-- WAR packaging is required for rendering JSP to work with embedded
         tomcat. The war is executable like a JAR though, i.e:

            $ java -jar target/FoundationsViewer-1.0-SNAPSHOT.war

         This is documented here: https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-jsp-limitations
         -->
    <packaging>war</packaging>

    <name>CUDL Viewer</name>
    <url>https://bitbucket.org/CUDL/cudl-viewer</url>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.javadoc.skip>true</maven.javadoc.skip>

        <embedded-viewer-assets.version>0.1.0</embedded-viewer-assets.version>
        <cudl-viewer-ui.version>1.4.5</cudl-viewer-ui.version>
    </properties>

    <scm>
        <connection>scm:git:ssh://git@bitbucket.org/CUDL/cudl-viewer.git</connection>
        <developerConnection>scm:git:ssh://git@bitbucket.org/CUDL/cudl-viewer.git</developerConnection>
        <url>https://bitbucket.org/CUDL/cudl-viewer</url>
        <tag>HEAD</tag>
    </scm>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- We don't want to include the global properties file as this changes
                 depending on the environment - dev, beta live etc. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <warName>FoundationsViewer</warName>
                    <packagingExcludes>
                        WEB-INF/classes/cudl-global.properties
                    </packagingExcludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <!-- Don't automatically push changes to the remote repo
                         while executing release:prepare. -->
                    <pushChanges>false</pushChanges>
                    <!-- Use the local repo with release:perform instead of the
                         upstream repository specified in <scm>. -->
                    <localCheckout>true</localCheckout>
                </configuration>
            </plugin>

            <!-- Explicitly fail the build if Maven 3 is not being used.
                 The S3 Wagon doesn't work on Maven 2. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven-3</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.0.0</version>
                                </requireMavenVersion>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources/</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <extensions>
            <extension>
                <groupId>org.springframework.build</groupId>
                <artifactId>aws-maven</artifactId>
                <version>5.0.0.RELEASE</version>
            </extension>
        </extensions>
    </build>

    <dependencies>
        <!-- Include the viewer UI's built assets. The resources jar contains
             the built files under META-INF/resources which gets served as if
             they were in the war's root. -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>viewer-ui</artifactId>
            <version>${cudl-viewer-ui.version}</version>
            <classifier>resources</classifier>
            <type>jar</type>
        </dependency>

        <!-- Include the viewer UI's build metadata JSON files -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>viewer-ui</artifactId>
            <version>${cudl-viewer-ui.version}</version>
        </dependency>

        <!-- Include the embedded viewer's assets (html, css, js etc). -->
        <!-- TODO: I've not tested it, but it should be possible to include the
             previous version of the embedded viewer after this in order to have
             assets resolve for both versions. This would be required when
             updating the viewer so that people using cached viewer HTML could
             still resolve assets. As long as the new version is earlier on the
             classpath the correct viewer html should be used. -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>embedded-viewer-assets</artifactId>
            <version>${embedded-viewer-assets.version}</version>
        </dependency>

        <!-- Provides a ResourceTransformer which dynamically configures the
             embedded viewer HTML. -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>embedded-viewer-configurer</artifactId>
            <version>0.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.tuckey</groupId>
            <artifactId>urlrewritefilter</artifactId>
            <version>4.0.4</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jsp-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging-api</artifactId>
            <version>1.1</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.3</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- Note that we only use the javax.mail API, not the simplified API
             from commons-email.-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>1.5</version>
        </dependency>

        <!-- DB Pool -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
        </dependency>

        <!-- for XML parsing -->
        <dependency>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
        </dependency>

        <!-- for JSON parsing in Java -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20180813</version>
        </dependency>

        <!-- jtidy -->
        <dependency>
            <groupId>net.sf.jtidy</groupId>
            <artifactId>jtidy</artifactId>
            <version>r938</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>org.slf4j</groupId>-->
            <!--<artifactId>slf4j-log4j12</artifactId>-->
        <!--</dependency>-->

        <!-- taglibs -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>

        <!-- PostgreSQL driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <!-- Spring Framework -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security.oauth</groupId>
            <artifactId>spring-security-oauth2</artifactId>
            <version>2.3.3.RELEASE</version>
        </dependency>

        <!-- Test utilities -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

        <!-- JSON reading/writing for oauth -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- for decrypting web tokens (oauth) -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-jwt</artifactId>
            <version>1.0.9.RELEASE</version>
        </dependency>

        <!-- raven auth, in cudl repo -->
        <dependency>
            <groupId>uk.ac.cam.lib</groupId>
            <artifactId>spring-security-raven</artifactId>
            <version>1.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <version>4.11.2.201809100523-r</version> <!-- TODO: v5 -->
        </dependency>

        <!-- for Genizah tagging, also upgrade org.slf4j version
        or it will conflict with Jena -->

        <!-- Google GSON -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <!-- Google Guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>

        <!-- Apache Jena -->
        <dependency>
            <groupId>org.apache.jena</groupId>
            <artifactId>jena-core</artifactId>
            <version>2.13.0</version>  <!-- TODO: v3 -->

            <exclusions>
                <!-- Apache Jenna 2.x includes the concrete log4j12 binding, leading to
                     multiple bindings (because spring boot includes logback).
                     Manually exclude it until we upgrade to Jenna 3.x (which hopefully
                     doesn't do this).-->
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.jena</groupId>
            <artifactId>jena-arq</artifactId>
            <version>2.13.0</version>

            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- for Genizah tagging end -->

        <dependency>
            <groupId>com.github.livesense</groupId>
            <artifactId>org.liveSense.scripting.jsp.taglib.jsonatg</artifactId>
            <version>1.0.5</version>
        </dependency>
    </dependencies>

    <!-- Resolve private CUDL artifacts -->
    <repositories>
        <repository>
            <id>cudl-aws-release</id>
            <name>AWS Release Repository</name>
            <url>s3://mvn.cudl.lib.cam.ac.uk/release</url>
        </repository>
        <repository>
            <id>cudl-aws-snapshot</id>
            <name>AWS Snapshot Repository</name>
            <url>s3://mvn.cudl.lib.cam.ac.uk/snapshot</url>
        </repository>
    </repositories>

    <!-- Use CUDL's private repo to deploy artifacts -->
    <distributionManagement>
        <repository>
            <id>cudl-aws-release</id>
            <name>AWS Release Repository</name>
            <url>s3://mvn.cudl.lib.cam.ac.uk/release</url>
        </repository>
        <snapshotRepository>
            <id>cudl-aws-snapshot</id>
            <name>AWS Snapshot Repository</name>
            <url>s3://mvn.cudl.lib.cam.ac.uk/snapshot</url>
        </snapshotRepository>
    </distributionManagement>
</project>
